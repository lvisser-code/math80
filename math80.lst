ERR LINE  ADDR B1 B2 B3   *** ASM80 ASSEMBLER VER 1.0 ***
       1                  ;******************************************************************************
       2                  ; Integer and floating point math routines for 8080 & 8085 microprocessors.
       3                  ; Author - Leonard Visser
       4                  ; Update - 17Apr2023
       5                  ;
       6                  ;Integer subroutine call parameters shown in ( ).  @RP is a pointer.
       7                  ;  IABS   (HL) 16 bit signed integer absolute value. Returns HL
       8                  ;  IADD   (HL, DE) 16 bit signed integer addition: HL + DE. Returns HL, CY
       9                  ;  IADDU  (HL, DE) 16 bit unsigned integer addition: HL + DE. Returns HL, CY
      10                  ;  IASC   (@DE) 16 bit signed convert ASCII Decimal number to Integer
      11                  ;  ICMP   (HL, DE) 16 bit unsigned integer compare: HL - DE.  Returns flags
      12                  ;  IDIV   (HL, DE) 16 bit signed division: HL / DE.  Returns HL
      13                  ;  IMUL   (HL, DE) 16 bit signed integer multiplication: HL * DE. Returns HL
      14                  ;  INEG   (HL) 16 bit signed integer negation: returns 2's complement of HL
      15                  ;  IPRINT (HL) Print 16 bit signed integer value as ASCII number
      16                  ;  IRND   (HL) 8 but integer pseudo-random number generator (1..255)
      17                  ;  ISUB   (HL, DE) 16 bit signed integer subtraction: HL - DE, Returns HL
      18                  ;  ISUBU  (HL, DE) 16 bit unsigned integer subtraction: HL - DE, Returns HL
      19                  ;
      20                  ;Floating point subroutines built on original LLL code from "Floating Point
      21                  ;Package for Intel 8008 and 8080 Microprocessors" *by Maples Oct 24 1975.
      22                  ;Floating point dword (32 bit) format:
      23                  ;  bbbbbbbb bbbbbbbb bbbbbbbb mexxxxxx
      24                  ;  where b=24 bit mantissa, m=mantissa sign, e=exponent sign, x=6 bit exponent
      25                  ;Numbers range from +/-6.46235E-27 to +/-4.61168E+18 with 7 digit accuracy.
      26                  ;Examples: 0. = 00 00 00 40H
      27                  ;          1. = 80 00 00 01H
      28                  ;         10. = A0 00 00 04H
      29                  ;Routines make use of a 17 byte scratch area FPSCR and operands FPOP1, FPOP2
      30                  ;which must all be in the same page of memory.  On call, H = HIGH(FPSCR) and
      31                  ;other pointers (L, B, C) will be a one byte offset, e.g. LOW(FPOP1).
      32                  ; *CVRT   (H, L=FPRES, C=FPSCR) Floating number at FPRES output as ASCII
      33                  ;  DCOS   (FPOP2) Floating cosine, COS(X).  Returns FPRES
      34                  ;  DEXP   (FPOP2) Floating exponentiation, EXP(X).  Returns FPRES
      35                  ;  DLOG   (FPOP2) Floating natural logarithm, LOG(X).  Returns FPRES
      36                  ;  DPOW   (FPOP1, FPOP2) Floating power, POW(X, Y).  Returns FPRES
      37                  ;  DSIN   (FPOP2) Floating sine, SIN(X), Returns FPRES
      38                  ; *DSQRT  (H, L=FPOP2, B=FPRES, C=FPSCR) Floating square root, SQRT(X).  FPRES
      39                  ;  DTAN   (FPOP2) Floating tangent, TAN(X).  Returns FPRES
      40                  ;  INPUT  (H, FPRES, FPSCR) Floating point 4-1/2 digit input from ASCII
      41                  ;  INP    Helper to INPUT
      42                  ;  LABS   (HL, C) Floating absolute value, |X|
      43                  ; *LADD   (H, L=FPOP1, B=FPOP2, C=FPSCR) Floating addition, X+Y. Returns FPOP1
      44                  ;  LCMP   (HL, B) Floating compare, X-Y.  Returns C, Z flags
      45                  ; *LDIV   (H, L=FPOP1, B=FPOP2, C=FPRES) Floating division, a/b. Returns FPRES
      46                  ;  LFLOAT (HL, BC) Floating convert from signed integer to float
      47                  ;  LINT   (HL) Floating convert to signed integer
      48                  ; *LMUL   (H, L=FPOP1, B=FPOP2, C=FPRES) Floating multiply, a*b. Returns FPRES
      49                  ;  LNEG   (HL, C) Floating negation, -(a)
      50                  ; *LSUB   (H, L=FPOP1, B=FPOP2, C=FPSCR) Floating subtract, a-b. Returns FPOP1
      51                  ;  OUTR   (A) Output an ASCII character
      52                  ;******************************************************************************
      53                  
      54                  
      55                  ;External routines and variables (not part of this package)
      56                  DISPA:  EQU  0          ;(A) Routine to display char
      57                  MSG:    EQU  0          ;(@HL) Routine to display string
      58                  ERRLN3: EQU  0          ;Routine to display math error message
      59                  ERRLN7: EQU  0          ;Routine to display overflow error message
      60                  STR1:   EQU  8000       ;String buffer
      61                  
      62                  ;Variables used by integer math routines
      63                  DSIGN:  DS   1          ;byte data used by IDIV
      64                  ISIGN:  DS   1          ;byte data used by IASC
      65                  RANDOM: DS   4          ;random number seeds
      66                  
      67                  ;Variables used by floating math routines must be in same memory page
      68                  FPRES:  DS   4          ;floating result
      69                  FPOP1:  DS   4          ;floating operand
      70                  FPOP2:  DS   4          ;floating operand
      71                  FPOP3:  DS   4          ;floating operand
      72                  FPOP4:  DS   4          ;floating operand
      73                  FPOP5:  DS   4          ;floating operand
      74                  FPOP6:  DS   4          ;floating operand
      75                  FPOP7:  DS   4          ;floating operand
      76                  FPSCR:  DS   17         ;floating point scratch area
      77                  FPPTR:  DS   2          ;word pointer
      78                  FPFLG:  DS   1          ;byte flag
      79                  FPCNT:  DS   1          ;byte counter
      80                  EXPI:   DS   1          ;byte EXP(X) counter
      81                  EXPS:   DS   1          ;byte EXP(X) sign flag
      82                  LSIGN:  DS   1          ;byte sign
      83                  
      84                  
      85                  
      86                  ;-----------------------------------------------------------------------------
      87                  ;-----------------------------------------------------------------------------
      88                  ;                           Integer Math Routines
      89                  ;-----------------------------------------------------------------------------
      90                  ;-----------------------------------------------------------------------------
      91                  
      92                  ;-----------------------------------------------------------------------------
      93                  ;(HL) 16 bit signed integer absolute value. Returns CY=1 if passed a negative.
      94  003E 7C         IABS:   MOV  A, H       ;Check the sign
      95  003F B7                 ORA  A          
      96  0040 F0                 RP              ;Done if positive, CY=0
      97  0041 CD C8 01           CALL INEG       ;Form 2's complement
      98  0044 37                 STC             ;CY=1
      99  0045 C9                 RET             
     100                  
     101                  ;------------------------------------------------------------------------------
     102                  ;(HL, DE) 16 bit signed integer addition: HL + DE. Returns HL, CY = overflow
     103  0046 7C         IADD:   MOV  A, H       ;HL and DE both positive?
     104  0047 07                 RLC             
     105  0048 DA 54 00           JC   IADDN      
     106  004B 7A                 MOV  A, D       
     107  004C 07                 RLC             
     108  004D DA 54 00           JC   IADDN      
     109  0050 19                 DAD  D          ;  Yes, then add
     110  0051 7C                 MOV  A, H       
     111  0052 07                 RLC             
     112  0053 C9                 RET             
     113  0054 7C         IADDN:  MOV  A, H       ;HL and DE both negative?
     114  0055 07                 RLC             
     115  0056 D2 63 00           JNC  IADDM      
     116  0059 7A                 MOV  A, D       
     117  005A 07                 RLC             
     118  005B D2 63 00           JNC  IADDM      
     119  005E 19                 DAD  D          ;  Yes, then add
     120  005F 7C                 MOV  A, H       
     121  0060 07                 RLC             
     122  0061 3F                 CMC             
     123  0062 C9                 RET             
     124  0063 19         IADDM:  DAD  D          ;HL and DE have mixed signs
     125  0064 37                 STC             
     126  0065 3F                 CMC             
     127  0066 C9                 RET             
     128                  
     129                  ;------------------------------------------------------------------------------
     130                  ;(HL, DE) 16 bit unsigned integer addition: HL + DE. Returns HL, CY = overflow
     131  0067 7D         IADDU:  MOV  A, L       
     132  0068 83                 ADD  E          
     133  0069 6F                 MOV  L, A       
     134  006A 7C                 MOV  A, H       
     135  006B 8A                 ADC  D          
     136  006C 67                 MOV  H, A       
     137  006D C9                 RET             
     138                  
     139                  ;------------------------------------------------------------------------------
     140                  ;(@DE) 16 bit signed convert ASCII Decimal number to Integer.
     141                  ;Returns HL=value, CY=err
     142  006E C5         IASC:   PUSH B          
     143  006F 21 00 00           LXI  H, 0       ;Init result = 0
     144  0072 97                 SUB  A          
     145  0073 32 01 00           STA  ISIGN      ;Init sign = 0 (positive)
     146  0076 CD 76 02           CALL NOSPC      ;Skip leading spaces, A=1st char
     147  0079 FE 2B              CPI  '+'        ;Skip leading '+'
     148  007B C2 83 00           JNZ  ASCIN0     
     149  007E 13                 INX  D          
     150  007F 1A                 LDAX D          
     151  0080 C3 8F 00           JMP  ASCIN1     
     152  0083 FE 2D      ASCIN0: CPI  '-'        ;Negative?
     153  0085 C2 8F 00           JNZ  ASCIN1     
     154  0088 3E 01              MVI  A, 1       ;Sign = 1 (negative)
     155  008A 32 01 00           STA  ISIGN      
     156  008D 13                 INX  D          
     157  008E 1A                 LDAX D          
     158  008F CD 7E 02   ASCIN1: CALL IS09       ;Check for a digit
     159  0092 DA C1 00           JC   ASCIXT     ;  if not exit with CY=1
     160  0095 D6 30      ASCIN2: SUI  '0'        ;Convert ASCII digit to hex byte
     161  0097 44                 MOV  B, H       ;Mult HL by 10
     162  0098 4D                 MOV  C, L       
     163  0099 29                 DAD  H          ;  x2
     164  009A 29                 DAD  H          ;  x4
     165  009B 29                 DAD  H          ;  x8
     166  009C 09                 DAD  B          ;  x9
     167  009D 09                 DAD  B          ;  x10
     168  009E DA C1 00           JC   ASCIXT     ;Overflow (>FFFF)?
     169  00A1 06 00              MVI  B, 0       ;Add byte in A to HL
     170  00A3 4F                 MOV  C, A       
     171  00A4 09                 DAD  B          
     172  00A5 DA C1 00           JC   ASCIXT     ;Overflow (>FFFF)?
     173  00A8 13                 INX  D          ;A = next Char
     174  00A9 1A                 LDAX D          
     175  00AA CD 7E 02           CALL IS09       ;Another digit?
     176  00AD D2 95 00           JNC  ASCIN2     ;  loop if yes
     177  00B0 7C                 MOV  A, H       ;Result > 7FFFH (Overflow)?
     178  00B1 E6 80              ANI  80H        
     179  00B3 C2 C1 00           JNZ  ASCIXT     
     180  00B6 3A 01 00           LDA  ISIGN      ;Check sign
     181  00B9 B7                 ORA  A          
     182  00BA CA C0 00           JZ   ASCIN4     
     183  00BD CD C8 01           CALL INEG       ;Negative so form 2's complement
     184  00C0 97         ASCIN4: SUB  A          ;Successful conversion, CY=0
     185  00C1 C1         ASCIXT: POP  B          ;Exit
     186  00C2 C9                 RET             
     187                  
     188                  ;------------------------------------------------------------------------------
     189                  ;(HL, DE) 16 bit unsigned integer compare: HL - DE
     190                  ;Returns correct C & Z flags. HL, DE unchanged
     191  00C3 7C         ICMP:   MOV  A, H       
     192  00C4 BA                 CMP  D          
     193  00C5 C0                 RNZ             
     194  00C6 7D                 MOV  A, L       
     195  00C7 BB                 CMP  E          
     196  00C8 C9                 RET             
     197                  
     198                  ;------------------------------------------------------------------------------
     199                  ;(HL, DE) 16 bit signed division: HL / DE
     200                  ;Returns HL=result, DE=remainder, CY=1 if divide by 0 error.  Uses DSIGN
     201  00C9 C5         IDIV:   PUSH B          
     202  00CA 06 00              MVI  B, 0       ;Make both args positive
     203  00CC CD 3E 00           CALL IABS       ;  while saving their signs
     204  00CF D2 D3 00           JNC  IDIVB      
     205  00D2 04                 INR  B          
     206  00D3 EB         IDIVB:  XCHG            
     207  00D4 CD 3E 00           CALL IABS       
     208  00D7 D2 DB 00           JNC  IDIVC      
     209  00DA 04                 INR  B          
     210  00DB EB         IDIVC:  XCHG            
     211  00DC 78                 MOV  A, B       
     212  00DD 32 00 00           STA  DSIGN      ;Save sign
     213  00E0 01 00 00           LXI  B, 0       ;Init quotient = 0
     214  00E3 7A                 MOV  A, D       ;Divide by 0?
     215  00E4 83                 ADD  E          
     216  00E5 C2 EC 00           JNZ  IDIV1      
     217  00E8 37                 STC             ;  CY=1
     218  00E9 C3 81 01           JMP  IDIVX      
     219  00EC CD C3 00   IDIV1:  CALL ICMP       ;Compare values
     220  00EF CA 69 01           JZ   IDIVL      ;Is divisor = dividend?
     221  00F2 DA 73 01           JC   IDIVD      ;Is divisor > dividend?
     222  00F5 7A                 MOV  A, D       ;Is devisor > 255?
     223  00F6 B7                 ORA  A          
     224  00F7 C2 69 01           JNZ  IDIVL      
     225  00FA 7B                 MOV  A, E       
     226  00FB FE 01              CPI  1          ;Is divisor = 1?
     227  00FD C2 06 01           JNZ  IDIV2      
     228  0100 11 00 00           LXI  D, 0       ;  yes, then accelerate
     229  0103 C3 76 01           JMP  IDIVF      
     230  0106 FE 02      IDIV2:  CPI  2          ;Is divisor = 2?
     231  0108 C2 18 01           JNZ  IDIV10     
     232  010B 11 00 00           LXI  D, 0       ;  yes, then accelerate
     233  010E CD 83 01           CALL ARHL       ;  shift HL right (HL/2)
     234  0111 D2 76 01           JNC  IDIVF      
     235  0114 1C                 INR  E          
     236  0115 C3 76 01           JMP  IDIVF      
     237  0118 FE 0A      IDIV10: CPI  10         ;Is divisor = 10?
     238  011A C2 69 01           JNZ  IDIVL      
     239  011D E5                 PUSH H          ;  yes, then accelerate
     240  011E 54                 MOV  D, H       
     241  011F 5D                 MOV  E, L       
     242  0120 CD 83 01           CALL ARHL       
     243  0123 EB                 XCHG            
     244  0124 CD 83 01           CALL ARHL       
     245  0127 CD 83 01           CALL ARHL       
     246  012A 19                 DAD  D          ;  HL = dividend/2 + dividend/4
     247  012B 54                 MOV  D, H       
     248  012C 5D                 MOV  E, L       
     249  012D 0E 04              MVI  C, 4       
     250  012F CD 83 01   IDIV3:  CALL ARHL       
     251  0132 0D                 DCR  C          
     252  0133 C2 2F 01           JNZ  IDIV3      
     253  0136 19                 DAD  D          ;  HL = HL + HL/16
     254  0137 54                 MOV  D, H       
     255  0138 5D                 MOV  E, L       
     256  0139 0E 08              MVI  C, 8       
     257  013B CD 83 01   IDIV4:  CALL ARHL       
     258  013E 0D                 DCR  C          
     259  013F C2 3B 01           JNZ  IDIV4      
     260  0142 19                 DAD  D          ;  HL = HL + HL/256
     261  0143 CD 83 01           CALL ARHL       
     262  0146 CD 83 01           CALL ARHL       
     263  0149 CD 83 01           CALL ARHL       
     264  014C 44                 MOV  B, H       
     265  014D 4D                 MOV  C, L       ;  BC (result) = HL/8
     266  014E 54                 MOV  D, H       
     267  014F 5D                 MOV  E, L       
     268  0150 29                 DAD  H          
     269  0151 29                 DAD  H          
     270  0152 19                 DAD  D          
     271  0153 29                 DAD  H          
     272  0154 54                 MOV  D, H       
     273  0155 5D                 MOV  E, L       
     274  0156 E1                 POP  H          
     275  0157 CD 4E 02           CALL ISUB       
     276  015A EB                 XCHG            ;  DE (remainder) = (dividend-HL*4 + HL)*2
     277  015B 3E 09              MVI  A, 9       ;Is remainder > 9?
     278  015D BB                 CMP  E          
     279  015E D2 74 01           JNC  IDIVE      
     280  0161 03                 INX  B          ;  Yes, then inc B & remainder -= 10
     281  0162 7B                 MOV  A, E       
     282  0163 D6 0A              SUI  10         
     283  0165 5F                 MOV  E, A       
     284  0166 C3 74 01           JMP  IDIVE      
     285                  
     286  0169 CD 4E 02   IDIVL:  CALL ISUB       ;Subtract divisor from dividend
     287  016C 03                 INX  B          ;Increment quotient
     288  016D CD C3 00           CALL ICMP       
     289  0170 D2 69 01           JNC  IDIVL      
     290  0173 EB         IDIVD:  XCHG            ;Remainder in DE
     291  0174 60         IDIVE:  MOV  H, B       ;Result in HL
     292  0175 69                 MOV  L, C       
     293  0176 3A 00 00   IDIVF:  LDA  DSIGN      ;Get sign
     294  0179 1F                 RAR             ;Is sign negative?
     295  017A D2 81 01           JNC  IDIVX      
     296  017D CD C8 01           CALL INEG       ;Quotient is negative
     297  0180 97                 SUB  A          ;CY=0
     298  0181 C1         IDIVX:  POP  B          
     299  0182 C9                 RET             
     300                  ;(HL) Rotate HL right 1 bit position, CY = LSB
     301  0183 97         ARHL:   SUB  A          ;clear CY flag
     302  0184 7C                 MOV  A, H       ;rotate H
     303  0185 1F                 RAR             
     304  0186 67                 MOV  H, A       
     305  0187 7D                 MOV  A, L       ;rotate L
     306  0188 1F                 RAR             
     307  0189 6F                 MOV  L, A       
     308  018A C9                 RET             
     309                  
     310                  ;----------------------------------------------------------------------
     311                  ;(HL, DE) 16 bit signed integer multiplication: HL * DE
     312                  ;Returns HL, CY = 1 if overflow
     313  018B C5         IMUL:   PUSH B          
     314  018C D5                 PUSH D          
     315  018D 01 08 00           LXI  B, 8       ;B = 0 (sign), C = 8 (loop counter)
     316  0190 CD 3E 00           CALL IABS       ;Make both args positive while
     317  0193 D2 97 01           JNC  IMUL1      ;  saving their signs in B
     318  0196 04                 INR  B          
     319  0197 EB         IMUL1:  XCHG            
     320  0198 CD 3E 00           CALL IABS       
     321  019B D2 9F 01           JNC  IMUL2      
     322  019E 04                 INR  B          
     323  019F CD C3 00   IMUL2:  CALL ICMP       ;Compare HL&DE
     324  01A2 DA A6 01           JC   IMUL3      ;If HL is larger, then exchange
     325  01A5 EB                 XCHG            ;DE = multiplicand, HL = multiplier
     326  01A6 97         IMUL3:  SUB  A          ;H must be = 0, else overflow
     327  01A7 BC                 CMP  H          
     328  01A8 C2 C5 01           JNZ  IMULX      ;Exit with CY=1 if overflow
     329  01AB 7D                 MOV  A, L       ;Let A = multipler
     330  01AC 21 00 00           LXI  H, 0       ;Init product = 0
     331  01AF 29         IMUL4:  DAD  H          ;Rotate product left
     332  01B0 17                 RAL             ;Rotate multiplier left into CY
     333  01B1 D2 B8 01           JNC  IMUL5      
     334  01B4 19                 DAD  D          ;Add multiplicand to partial sum
     335  01B5 DA C5 01           JC   IMULX      ;Exit with CY=1 if overflow
     336  01B8 0D         IMUL5:  DCR  C          ;Next
     337  01B9 C2 AF 01           JNZ  IMUL4      
     338  01BC 78                 MOV  A, B       ;If sign of 1 arg was negative
     339  01BD 1F                 RAR             
     340  01BE D2 C5 01           JNC  IMULX      
     341  01C1 CD C8 01           CALL INEG       ;  then product is negative
     342  01C4 97                 SUB  A          ;CY=0
     343  01C5 D1         IMULX:  POP  D          
     344  01C6 C1                 POP  B          
     345  01C7 C9                 RET             
     346                  
     347                  ;----------------------------------------------------------------------
     348                  ;(HL) 16 bit signed integer negation: returns 2's complement of HL
     349  01C8 F5         INEG:   PUSH PSW        
     350  01C9 7C                 MOV  A, H       
     351  01CA 2F                 CMA             
     352  01CB 67                 MOV  H, A       
     353  01CC 7D                 MOV  A, L       
     354  01CD 2F                 CMA             
     355  01CE 6F                 MOV  L, A       
     356  01CF 23                 INX  H          
     357  01D0 F1                 POP  PSW        
     358  01D1 C9                 RET             
     359                  
     360                  ;------------------------------------------------------------------------------
     361                  ;(HL) Print 16 bit signed integer value as ASCII number between -32768 to 32767
     362  01D2 CD DC 01   IPRINT: CALL IPSTR1     ;Convert integer value to ASCII string
     363  01D5 21 41 1F           LXI  H, STR1+1  
     364  01D8 CD 00 00           CALL MSG        ;Display the string
     365  01DB C9                 RET             
     366                  ;Convert integer value to ASCII string. Save in STR1 with format:
     367                  ;  length|string|0.
     368  01DC C5         IPSTR1: PUSH B          
     369  01DD D5                 PUSH D          
     370  01DE 01 00 00           LXI  B, 0       ;B=SIGN, C=digit counter
     371  01E1 7C                 MOV  A, H       ;If integer is negative..
     372  01E2 E6 80              ANI  80H        
     373  01E4 CA EC 01           JZ   IPSTR2     
     374  01E7 06 2D              MVI  B, '-'     ;  then SIGN = '-'
     375  01E9 CD 3E 00           CALL IABS       ;  HL = |HL|
     376  01EC 11 0A 00   IPSTR2: LXI  D, 10      
     377  01EF CD C9 00           CALL IDIV       ;(HL) ret HL / 10
     378  01F2 D5                 PUSH D          ;E = digit, stack it
     379  01F3 0C                 INR  C          ;Inc digit counter
     380  01F4 7D                 MOV  A, L       ;Loop until HL = 0
     381  01F5 B4                 ORA  H          
     382  01F6 C2 EC 01           JNZ  IPSTR2     
     383                  
     384  01F9 21 40 1F           LXI  H, STR1    ;Write string to STR1
     385  01FC 71                 MOV  M, C       ;Write length
     386  01FD 78                 MOV  A, B       ;Write '-' if negative
     387  01FE B7                 ORA  A          
     388  01FF CA 08 02           JZ   IPSTR3     
     389  0202 79                 MOV  A, C       
     390  0203 3C                 INR  A          
     391  0204 77                 MOV  M, A       
     392  0205 23                 INX  H          
     393  0206 36 2D              MVI  M, '-'     
     394  0208 23         IPSTR3: INX  H          
     395  0209 D1                 POP  D          ;Unstack digit
     396  020A 7B                 MOV  A, E       
     397  020B C6 30              ADI  '0'        ;Convert to ASCII
     398  020D 77                 MOV  M, A       ;Write to STR1
     399  020E 0D                 DCR  C          
     400  020F C2 08 02           JNZ  IPSTR3     ;loop till digit counter=0
     401  0212 23                 INX  H          
     402  0213 97                 SUB  A          
     403  0214 77                 MOV  M, A       ;Write terminating 0
     404  0215 D1                 POP  D          
     405  0216 C1                 POP  B          
     406  0217 C9                 RET             
     407                  
     408                  ;------------------------------------------------------------------------------
     409                  ;(HL) Integer pseudo-random number generator (1..255)
     410                  ;Call with HL = upper value, returns random in L
     411  0218 C5         IRND:   PUSH B          
     412  0219 D5                 PUSH D          
     413  021A 7C                 MOV  A, H       ;HL cannot be 0
     414  021B 85                 ADD  L          
     415  021C CA 4B 02           JZ   IRNDX      
     416  021F EB                 XCHG            ;Save upper in DE
     417  0220 21 05 00           LXI  H, RANDOM+3;HL=ptr to seed data
     418  0223 06 08              MVI  B, 8       ;Loop count
     419  0225 3E A1              MVI  A, 241Q    
     420  0227 07         IRNDL:  RLC             
     421  0228 07                 RLC             
     422  0229 07                 RLC             
     423  022A AE                 XRA  M          
     424  022B 17                 RAL             
     425  022C 17                 RAL             
     426  022D 2D                 DCR  L          
     427  022E 2D                 DCR  L          
     428  022F 2D                 DCR  L          
     429  0230 7E                 MOV  A, M       
     430  0231 17                 RAL             
     431  0232 77                 MOV  M, A       
     432  0233 2C                 INR  L          
     433  0234 7E                 MOV  A, M       
     434  0235 17                 RAL             
     435  0236 77                 MOV  M, A       
     436  0237 2C                 INR  L          
     437  0238 7E                 MOV  A, M       
     438  0239 17                 RAL             
     439  023A 77                 MOV  M, A       
     440  023B 2C                 INR  L          
     441  023C 7E                 MOV  A, M       
     442  023D 17                 RAL             
     443  023E 77                 MOV  M, A       
     444  023F 05                 DCR  B          
     445  0240 C2 27 02           JNZ  IRNDL      
     446  0243 6F                 MOV  L, A       ;HL = result
     447  0244 26 00              MVI  H, 0       ;DE = upper limit
     448  0246 CD C9 00           CALL IDIV       ;DE = remainder of result/limit
     449  0249 13                 INX  D          ;+1
     450  024A EB                 XCHG            
     451  024B D1         IRNDX:  POP  D          
     452  024C C1                 POP  B          
     453  024D C9                 RET             
     454                  
     455                  ;----------------------------------------------------------------------
     456                  ;(HL, DE) 16 bit signed integer subtraction (HL - DE)
     457                  ;Returns HL, CY=1 if overflow
     458  024E 7C         ISUB:   MOV  A, H       ;Is HL negative and DE positive?
     459  024F 07                 RLC             
     460  0250 D2 64 02           JNC  ISUBNC     ;  No, HL is positive
     461  0253 7A                 MOV  A, D       
     462  0254 07                 RLC             
     463  0255 DA 64 02           JC   ISUBNC     ;  No, DE is negative
     464  0258 7D                 MOV  A, L       ;Subtract and test sign of result
     465  0259 93                 SUB  E          
     466  025A 6F                 MOV  L, A       
     467  025B 7C                 MOV  A, H       
     468  025C 9A                 SBB  D          
     469  025D 67                 MOV  H, A       
     470  025E 07                 RLC             
     471  025F DA 6B 02           JC   ISUBX      ;  jump if result negative
     472  0262 3F                 CMC             
     473  0263 C9                 RET             ;Result positive means overflow
     474  0264 7D         ISUBNC: MOV  A, L       ;Subtract, CY=0
     475  0265 93                 SUB  E          
     476  0266 6F                 MOV  L, A       
     477  0267 7C                 MOV  A, H       
     478  0268 9A                 SBB  D          
     479  0269 67                 MOV  H, A       
     480  026A 37                 STC             
     481  026B 3F         ISUBX:  CMC             ;CY = 0
     482  026C C9                 RET             
     483                  
     484                  ;----------------------------------------------------------------------
     485                  ;(HL, DE) 16 bit unsigned integer subtraction: HL - DE.  Returns HL
     486  026D F5         ISUBU:  PUSH PSW        
     487  026E 7D                 MOV  A, L       
     488  026F 93                 SUB  E          
     489  0270 6F                 MOV  L, A       
     490  0271 7C                 MOV  A, H       
     491  0272 9A                 SBB  D          
     492  0273 67                 MOV  H, A       
     493  0274 F1                 POP  PSW        
     494  0275 C9                 RET             
     495                  
     496                  ;------------------------------------------------------------------------------
     497                  ;(@DE) Skip spaces in text pointed to by DE
     498  0276 1A         NOSPC:  LDAX D          
     499  0277 FE 20              CPI  ' '        ;  (where DE->) and return first
     500  0279 C0                 RNZ             ;  non-space char in A
     501  027A 13                 INX  D          
     502  027B C3 76 02           JMP  NOSPC      
     503                  
     504                  ;------------------------------------------------------------------------------
     505                  ;(A) Test for char '0'-'9', returns CY=0 if yes
     506  027E FE 30      IS09:   CPI  '0'        ;If A is '0'-'9' CY=0
     507  0280 D8                 RC              ;  else CY=1
     508  0281 FE 3A              CPI  ':'        
     509  0283 3F                 CMC             
     510  0284 C9                 RET             
     511                  
     512                  
     513                  
     514                  
     515                  
     516                  
     517                  ;**********************************************************************
     518                  ;**********************************************************************
     519                  ;                    Floating point math routines
     520                  ;**********************************************************************
     521                  ;**********************************************************************
     522                  
     523                  MINCH:  EQU  300Q       ;MINIMUM CHARACTERISTIC WITH SIGN EXTENDED
     524                  MAXCH:  EQU  077Q       ;MAXIMUM CHARACTERISTIC WITH SIGN EXTENDED
     525                  
     526                  ;******************************************************
     527                  ;       //// DIVIDE SUBROUTINE
     528                  ;******************************************************
     529  0285 CD EE 05   LDIV:   CALL CSIGN      ;COMPUTE SIGN OF RESULT
     530  0288 CD 5F 04           CALL ZCHK       ;CHECK IF DIVIDEND = ZERO
     531  028B C2 97 02           JNZ  DTST2      ;IF DIVIDEND .NE. 0 CHECK DIVISOR
     532  028E CD 67 04           CALL BCHK       ;CHECK FOR ZERO/ZERO
     533  0291 CA 2D 05           JZ   INDFC      ;ZERO/ZERO = INDEFINITE
     534  0294 C3 34 05           JMP  WZERC      ;ZERO/NONZERO = ZERO
     535  0297 CD 67 04   DTST2:  CALL BCHK       ;COME HERE IF DIVIDEND .NE. 0
     536  029A CA E0 05           JZ   OFLWC      ;NONZERO/ZERO = OVERFLOW
     537                  ;IF WE GET HERE, THINGS LOOK OKAY
     538  029D 5D                 MOV  E,L        ;SAVE BASE IN E
     539  029E 69                 MOV  L,C        ;BASE 6 TO L
     540  029F CD A2 04           CALL DCLR       ;CLEAR QUOTIENT MANTISSA SLOT
     541  02A2 6B                 MOV  L,E        ;RESTORE BASE IN L
     542  02A3 CD 95 05           CALL ENT1       ;DO FIRST CYCLE
     543  02A6 69                 MOV  L,C        ;BASE 6 TO L
     544  02A7 CD 6E 04           CALL DLST       ;MOVE QUOTIENT OVER ONE PLACE
     545  02AA 16 17              MVI  D,23       ;NUMBER OF ITERATIONS TO D
     546  02AC 6B         REP3:   MOV  L,E        
     547  02AD CD 8F 05           CALL ENT2       
     548  02B0 15                 DCR  D          ;DEC D
     549  02B1 CA C0 02           JZ   GOON       
     550  02B4 7D                 MOV  A,L        
     551  02B5 69                 MOV  L,C        ;BASE 6 TO L
     552  02B6 4F                 MOV  C,A        
     553  02B7 CD 6E 04           CALL DLST       ;MOVE QUOTIENT MANT OVER
     554  02BA 7D                 MOV  A,L        ;CPTR TO A
     555  02BB 59                 MOV  E,C        ;LPTR TO E
     556  02BC 4F                 MOV  C,A        ;CPTR TO C
     557  02BD C3 AC 02           JMP  REP3       
     558                  ;
     559  02C0 CD 66 05   GOON:   CALL AORS       ;CHECK IF RESULT IS NORMALIZED
     560  02C3 FA D2 02           JM   CRIN       
     561  02C6 7D                 MOV  A,L        ;LPTR TO A
     562  02C7 69                 MOV  L,C        ;CPTR TO L
     563  02C8 4F                 MOV  C,A        ;LPTR TO C
     564  02C9 CD 6E 04           CALL DLST       ;SHIFT QUOTIENT LEFT
     565  02CC 4D                 MOV  C,L        
     566  02CD 6B                 MOV  L,E        
     567  02CE CD BE 05           CALL LDCP       ;COMPUTE THE CHARACTERISTIC OF RESULT
     568  02D1 C9                 RET             
     569                  ;
     570  02D2 CD D1 04   CRIN:   CALL CFCHE      ;GET A=CHAR(H,L), E=CHAR(H,B)
     571  02D5 93                 SUB  E          ;NEW CHAR = CHAR(DIVIDEND) - CHAR(DVISIOR)
     572  02D6 FE 7F              CPI  177Q       ;CHECK MAX POSITIVE NUMBER
     573  02D8 CA E0 05           JZ   OFLWC      ;JUMP ON OVERFLOW
     574  02DB C6 01              ADI  1          ;ADD 1 SINCE WE DID NOT LEFTSHIFT
     575  02DD CD C9 05           CALL CCHK       ;CHECK AND STORE CHARACTERISTIC
     576  02E0 C9                 RET             ;RETURN
     577                  
     578                  
     579                  ;******************************************************
     580                  ;       //// ADDITION SUBROUTINE
     581                  ;******************************************************
     582  02E1 AF         LADD:   XRA  A          ;/***SET UP TO ADD
     583  02E2 C3 E7 02           JMP  LADS       ;NOW DO IT
     584                  
     585                  
     586                  ;******************************************************
     587                  ;       //// SUBTRACTION SUBROUTINE
     588                  ;******************************************************
     589  02E5 3E 80      LSUB:   MVI  A,200Q     ;/****SET UP TO SUBTRACT
     590                  ;   SUBROUTINE LADS
     591                  ;
     592                  ;       FLOATING POINT ADD OR SUB
     593                  ;       A 128 ON ENTRY SUB
     594                  ;       A 0 ON ENTRY ADD
     595                  ;       F-S F,FIRST OPER DESTROYED
     596                  ;       BASE 11 USED FOR SCRATCH
     597  02E7 CD 74 05   LADS:   CALL ACPR       ;SAVE ENTRY PNT AT BASE 6
     598  02EA CD 67 04           CALL BCHK       ;CHECK ADDEND/SUBTRAHEND = ZERO
     599  02ED C8                 RZ              ;IF SO, RESULT=ARG SO RETURN
     600                  ;THIS WILL PREVENT UNDERFLOW INDICATION ON
     601                  ;ZERO + OR - ZERO
     602  02EE CD E0 04           CALL CCMP       
     603  02F1 CA 21 03           JZ   EQ02       ;IF EQUAL, GO ON
     604  02F4 57                 MOV  D,A        ;SAVE LPTR CHAR IN D
     605  02F5 DA 04 03           JC   LLTB       
     606  02F8 93                 SUB  E          ;L.GT.B IF HERE
     607  02F9 E6 7F              ANI  127        
     608  02FB 57                 MOV  D,A        ;DIFFERENCE TO D
     609  02FC 5D                 MOV  E,L        ;SAVE BASE IN E
     610  02FD 69                 MOV  L,C        ;C PTR TO L
     611  02FE 2C                 INR  L          ;C PTR 1 TO L
     612  02FF 73                 MOV  M,E        ;SAVE BASE IN C PTR\1
     613  0300 68                 MOV  L,B        ;B PTR TO L
     614  0301 C3 09 03           JMP  NCHK       
     615  0304 7B         LLTB:   MOV  A,E        ;L.LT.B IF HERE,BPTR TO A
     616  0305 92                 SUB  D          ;SUBTRACT LPTR CHAR FROM BPTR CHAR
     617  0306 E6 7F              ANI  127        
     618  0308 57                 MOV  D,A        ;DIFFERENCE TO D
     619  0309 3E 18      NCHK:   MVI  A,24       
     620  030B BA                 CMP  D          
     621  030C D2 11 03           JNC  SH10       
     622  030F 16 18              MVI  D,24       
     623  0311 B7         SH10:   ORA  A          
     624  0312 CD 7D 04           CALL DRST       
     625  0315 15                 DCR  D          
     626  0316 C2 11 03           JNZ  SH10       
     627  0319 7D         EQUL:   MOV  A,L        
     628  031A B8                 CMP  B          
     629  031B C2 21 03           JNZ  EQ02       ;F.GT.S IF L.NE.B
     630  031E 69                 MOV  L,C        ;C PTR TO L
     631  031F 2C                 INR  L          ;C PTR\1 TO L
     632  0320 6E                 MOV  L,M        ;RESTORE L
     633  0321 CD 87 03   EQ02:   CALL LASD       ;CHECK WHAT TO
     634  0324 CD 74 05           CALL ACPR       ;SAVE ANSWER
     635  0327 FE 02              CPI  2          ;TEST FOR ZERO ANSWER
     636  0329 C2 2F 03           JNZ  NOT0       
     637  032C C3 12 05           JMP  WZER       ;WRITE FLOATING ZERO AND RETURN
     638                  ;
     639  032F 16 01      NOT0:   MVI  D,1        ;WILL TEST FOR SUB
     640  0331 A2                 ANA  D          
     641  0332 CA 5B 03           JZ   ADDZ       ;LSB 1 INPLIES SUB
     642  0335 CD 6C 05           CALL TSTR       ;CHECK NORMAL/REVERSE
     643  0338 CA 3E 03           JZ   SUBZ       ;IF NORMAL,GO SUBZ
     644  033B 7D                 MOV  A,L        ;OTHERWISE REVERSE
     645  033C 68                 MOV  L,B        ;ROLES
     646  033D 47                 MOV  B,A        ;OF L AND B
     647                  ;
     648  033E CD AB 04   SUBZ:   CALL DSUB       ;SUBTRACT SMALLER FROM BIGGER
     649  0341 CD 74 03           CALL MANT       ;SET UP SIGN OF RESULT
     650  0344 CD 6C 05           CALL TSTR       ;SEE IF WE NEED TO INTERCHANGE
     651                  ;BPTR AND LPTR
     652  0347 CA 32 04           JZ   NORM       ;NO INTERCHANGE NECESSARY, SO NORMALIZE
     653                  ;AND RETURN
     654  034A 7D                 MOV  A,L        ;INTERCHANGE
     655  034B 68                 MOV  L,B        ;L
     656  034C 47                 MOV  B,A        ;AND B
     657  034D 79                 MOV  A,C        ;CPTR  TO A
     658  034E 48                 MOV  C,B        ;BPTR TO C
     659  034F 5D                 MOV  E,L        ;LPTR TO E
     660  0350 47                 MOV  B,A        ;CPTR TO B
     661  0351 CD A9 05           CALL LXFR       ;MOVE BPTR> TO LPTR>
     662  0354 78                 MOV  A,B        
     663  0355 41                 MOV  B,C        
     664  0356 4F                 MOV  C,A        
     665  0357 6B                 MOV  L,E        
     666  0358 C3 32 04           JMP  NORM       ;NORMALIZE RESULT AND RETURN
     667                  ;
     668                  ;   COPY THE LARGER CHARACTERISTIC TO THE RESULT
     669                  ;
     670  035B CD E0 04   ADDZ:   CALL CCMP       ;COMPARE THE CHARACTERISTICS
     671  035E D2 64 03           JNC  ADD2       ;IF CHAR(H,L) .GE. CHAR(H,B) CONTINUE
     672  0361 CD 12 06           CALL BCTL       ;IF CHAR(H,L) .LT. CHAR(H,B) THE COPY
     673                  ;CHAR(H,B) TO CHAR(H,L)
     674  0364 CD 74 03   ADD2:   CALL MANT       ;COMPUTE SIGN OF RESULT
     675  0367 CD 8B 04           CALL DADD       ;ADD MANTISSAS
     676  036A D2 57 05           JNC  SCCFG      ;IF THERE IS NO OVFLW - DONE
     677  036D CD 7D 04           CALL DRST       ;IF OVERFLOW SHIFT RIGHT
     678  0370 CD 3B 05           CALL INCR       ;AND INCREMENT CHARACTERISTIC
     679  0373 C9                 RET             ;ALL DONE, SO RETURN
     680                  ;
     681                  ;   THIS ROUTINE STORES THE MANTISSA SIGN IN THE RESULT
     682                  ;   THE SIGN HAS PREVIOUSLY BEEN COMPUTED BY LASD.
     683                  ;
     684  0374 5D         MANT:   MOV  E,L        ;SAVE L PTR
     685  0375 69                 MOV  L,C        ;C PTR TO L
     686  0376 7E                 MOV  A,M        ;LOAD INDEX WORD
     687  0377 E6 80              ANI  128        ;SCARF SIGN
     688  0379 6B                 MOV  L,E        ;RESTORE L PTR
     689  037A 2C                 INR  L          ;L PTR 2
     690  037B 2C                 INR  L          
     691  037C 2C                 INR  L          ;TO L
     692  037D 5F                 MOV  E,A        ;SAVE SIGN IN E
     693  037E 7E                 MOV  A,M        
     694  037F E6 7F              ANI  127        ;SCARF CHAR
     695  0381 83                 ADD  E          ;ADD SIGN
     696  0382 77                 MOV  M,A        ;STORE IT
     697  0383 2D                 DCR  L          ;RESTORE
     698  0384 2D                 DCR  L          
     699  0385 2D                 DCR  L          ;L PTR
     700  0386 C9                 RET             
     701                  ;
     702                  ;
     703                  ;   SUBROUTINE LASD
     704                  ;
     705                  ;       UTILITY ROUTINE FOR LADS
     706                  ;       CALCULATES TRUE OPER AND SGN
     707                  ;       RETURNS ANSWER IN A
     708  0387 CD FE 05   LASD:   CALL MSFH       ;FETCH MANT SIGNS, F IN A,D
     709  038A BB                 CMP  E          ;COMPARE SIGNS
     710  038B DA B9 03           JC   ABCH       ;F\,S- MEANS GO TO A BRANCH
     711  038E C2 C2 03           JNZ  BBCH       ;F- S\ MEANS GO TO B BRANCH
     712  0391 83                 ADD  E          ;SAME SIGN IF HERE, ADD SIGNS
     713  0392 DA A7 03           JC   BMIN       ;IF BOTH MINUS, WILL OVERFLOW
     714  0395 CD 66 05           CALL AORS       ;BOTH POS IF HERE
     715  0398 F2 CB 03           JP   L000       ;IF AN ADD, LOAD 0
     716  039B CD 79 05   COM1:   CALL DCMP       ;COMPARE F WITH S
     717  039E DA D9 03           JC   L131       ;S.GT.F,SO LOAD 131
     718  03A1 C2 CD 03           JNZ  L001       ;F.GT.S,SO LOAD 1
     719  03A4 3E 02      L002:   MVI  A,2        ;ERROR CONDITION, ZERO ANSWER
     720  03A6 C9                 RET             
     721  03A7 CD 66 05   BMIN:   CALL AORS       ;CHECK FOR ADD OR SUB
     722  03AA F2 D3 03           JP   L128       ;ADD, SO LOAD 128
     723  03AD CD 79 05   COM2:   CALL DCMP       ;COMPARE F WITH S
     724  03B0 DA D0 03           JC   L003       ;S.GT.F,SO LOAD 3
     725  03B3 C2 D6 03           JNZ  L129       ;FGT.S.SO LOAD 129
     726  03B6 C3 A4 03           JMP  L002       ;ERROR
     727  03B9 CD 66 05   ABCH:   CALL AORS       ;FT,S- SO TEST FOR A/S
     728  03BC FA CB 03           JM   L000       ;SUBTRACT, SO LOAD 0
     729  03BF C3 9B 03           JMP  COM1       ;ADD, SO GO TO DCMP
     730  03C2 CD 66 05   BBCH:   CALL AORS       ;F-,S\,SO TEST FOR A/S
     731  03C5 FA D3 03           JM   L128       ;SUB
     732  03C8 C3 AD 03           JMP  COM2       ;ADD
     733  03CB AF         L000:   XRA  A          
     734  03CC C9                 RET             
     735  03CD 3E 01      L001:   MVI  A,1        
     736  03CF C9                 RET             
     737  03D0 3E 03      L003:   MVI  A,3        
     738  03D2 C9                 RET             
     739  03D3 3E 80      L128:   MVI  A,128      
     740  03D5 C9                 RET             
     741  03D6 3E 81      L129:   MVI  A,129      
     742  03D8 C9                 RET             
     743  03D9 3E 83      L131:   MVI  A,131      
     744  03DB C9                 RET             
     745                  ;
     746                  ;       SUBROUTINE LMCM
     747                  ;       COMPARES THE MAGNITUDE OF
     748                  ;       TWO FLOATING PNT NUMBERS
     749                  ;       Z[1 IF [,C[1 IF F.LT.S.
     750  03DC CD E0 04   LMCM:   CALL CCMP       ;CHECK CHARS
     751  03DF C0                 RNZ             ;RETURN IF NOT EQUAL
     752  03E0 CD 79 05           CALL DCMP       ;IF EQUAL, CHECK MANTS
     753  03E3 C9                 RET             
     754                  
     755                  
     756                  ;***************************************************
     757                  ;       //// MULTIPLY SUBROUTINE
     758                  ;***************************************************
     759                  ;
     760                  ;   SUBROUTINE LMUL
     761                  ;
     762                  ;       FLOATING POINT MULTIPLY
     763                  ;       L PTR X B PTR TO C PTR
     764                  ;
     765  03E4 CD EE 05   LMUL:   CALL CSIGN      ;COMPUTE SIGN OF RESULT AND STORE IT
     766  03E7 CD 5F 04           CALL ZCHK       ;CHECK FIRST OPERAND FOR ZERO
     767  03EA CA 34 05           JZ   WZERC      ;ZERO * ANYTHING = ZERO
     768  03ED CD 67 04           CALL BCHK       ;CHECK SECOND OPERAND FOR ZERO
     769  03F0 CA 34 05           JZ   WZERC      ;ANYTHING * ZERO = ZERO
     770  03F3 5D                 MOV  E,L        ;SAVE L PTR
     771  03F4 69                 MOV  L,C        ;C PTR TO L
     772  03F5 CD A2 04           CALL DCLR       ;CLR PRODUCT MANT LOCS
     773  03F8 6B                 MOV  L,E        ;L PTR TO L
     774  03F9 16 18              MVI  D,24       ;LOAD NUMBER ITERATIONS
     775  03FB CD 7D 04   KPGO:   CALL DRST       ;SHIFT L PTR RIGHT
     776  03FE DA 29 04           JC   MADD       ;WILL ADD B PTR IF C[1
     777  0401 7D                 MOV  A,L        ;INTERCHANGE
     778  0402 69                 MOV  L,C        ;L AND
     779  0403 4F                 MOV  C,A        ;C PTRS
     780  0404 CD 7D 04   INTR:   CALL DRST       ;SHIFT PRODUCT OVER
     781  0407 7D                 MOV  A,L        ;INTERCHANGE
     782  0408 69                 MOV  L,C        ;L AND C PTRS_BACK TO
     783  0409 4F                 MOV  C,A        ;ORIGINAL>
     784  040A 15                 DCR  D          
     785  040B C2 FB 03           JNZ  KPGO       ;MORE CYCLES IF Z[0
     786  040E CD 66 05           CALL AORS       ;TEST IF RESULT IS NORMALIZED
     787  0411 FA C5 05           JM   LMCP       ;IF NORMALIZED GO COMPUTE CHAR
     788  0414 5D                 MOV  E,L        ;SAVE LPTR IN E
     789  0415 69                 MOV  L,C        ;SET L=CPTR
     790  0416 CD 6E 04           CALL DLST       ;LEFT SHIFT RESULT TO NORMALIZE
     791  0419 6B                 MOV  L,E        ;RESTORE LPTR
     792  041A CD D1 04           CALL CFCHE      ;OTHERWISE SET A=CHAR(H,L), E=CHAR(H,B)
     793  041D 83                 ADD  E          ;CHAR(RESULT) = CHAR(H,L) + CHAR(H,B)
     794  041E FE 80              CPI  200Q       ;CHECK FOR SMALLEST NEGATIVE NUMBER
     795  0420 CA E7 05           JZ   UFLWC      ;IF SO THEN UNDERFLOW
     796  0423 D6 01              SUI  1          ;SUBTRACT 1 TO COMPENSATE FOR NORMALIZE
     797  0425 CD C9 05           CALL CCHK       ;CHECK CHARACTERISTIC AND STORE IT
     798  0428 C9                 RET             ;RETURN
     799                  ;
     800  0429 7D         MADD:   MOV  A,L        ;INTERCHANGE
     801  042A 69                 MOV  L,C        ;L AND
     802  042B 4F                 MOV  C,A        ;C PTRS
     803  042C CD 8B 04           CALL DADD       ;ACCUMULATE PRODUCT
     804  042F C3 04 04           JMP  INTR       
     805                  ;
     806                  ;   SUBROUTINE NORM
     807                  ;
     808                  ;       THIS SUBROUTINE WILL NORMALIZE A FLOATING POINT
     809                  ;       NUMBER, PRESERVING ITS ORIGINAL SIGN.
     810                  ;       WE CHECK FOR UNDERFLOW AND SET THE CONDITION
     811                  ;       FLAG APPROPRIATELY.  (SEE ERROR RETURNS).
     812                  ;       THERE IS AN ENTRY POINT TO FLOAT A SIGNED INTEGER
     813                  ;       (FLOAT) AND AN ENTRY POINT TO FLOAT AN UNSIGNED
     814                  ;       INTEGER.
     815                  ;
     816                  ;   ENTRY POINTS:
     817                  ;
     818                  ;       NORM  - NORMALIZE FLOATING PT NUMBER AT (H,L)
     819                  ;       FLOAT - FLOAT TRIPLE PRECISION INTEGER AT (H,L)
     820                  ;               PRESERVING SIGN BIT IN (H,L)+3
     821                  ;       DFXL  - FLOAT UNSIGNED (POSITIVE) TRIPLE PRECISION
     822                  ;               AT (H,L)
     823                  ;
     824                  ;   REGISTERS ON EXIT:
     825                  ;
     826                  ;       A = CONDITION FLAG (SEE ERROR RETURNS)
     827                  ;       D,E = GARBAGE
     828                  ;       B,C,H,L = SAME AS ON ENTRY
     829                  ;
     830  0432 5D         NORM:   MOV  E,L        ;SAVE L IN E
     831  0433 CD C6 04   NORM1:  CALL GCHAR      ;GET CHAR(H,L) IN A WITH SIGN EXTENDED
     832  0436 57                 MOV  D,A        ;SAVE CHAR IN D
     833  0437 6B         FXL1:   MOV  L,E        ;RESTORE L
     834  0438 CD 5F 04   FXL2:   CALL ZMCHK      ;CHECK FOR ZERO MANTISSA
     835  043B CA 12 05           JZ   WZER       ;IF ZERO MANTISSA THEN ZERO RESULT
     836  043E 7E         REP6:   MOV  A,M        ;GET MOST SIGNIFICANT BYTE OF
     837                  ;MANTISSA
     838  043F B7                 ORA  A          ;SET FLAGS
     839  0440 FA 50 04           JM   SCHAR      ;IF MOST SIGNFICANT BIT = 1 THEN
     840                  ;NUMBER IS NORMALIZED AND WE GO TO
     841                  ;STORE THE CHARACTERISTIC
     842  0443 7A                 MOV  A,D        ;OTHERWISE CHECK FOR UNDERFLOW
     843  0444 FE C0              CPI  MINCH      ;COMPARE WITH MINIMUM CHAR
     844  0446 CA E8 04           JZ   WUND       ;IF EQUAL THEN UNDERFLOW
     845  0449 CD 6E 04           CALL DLST       ;SHIFT MANTISSA LEFT
     846  044C 15                 DCR  D          ;DECREMENT CHARACTERSTIC
     847  044D C3 3E 04           JMP  REP6       ;LOOP AN TEST NEXT BIT
     848  0450 C3 48 05   SCHAR:  JMP  INCR3      ;STORE THE CHARACTERISTIC USING
     849                  ;THE SAME CODE AS THE INCREMENT
     850                  ;
     851  0453 5D         DFXL:   MOV  E,L        ;ENTER HERE TO FLOAT UNSIGNED
     852                  ;INTEGER
     853                  ;FIRT SAVE L IN E
     854  0454 2C                 INR  L          ;MAKE (H,L) POINT TO CHAR
     855  0455 2C                 INR  L          ;MAKE (H,L) POINT TO CHAR
     856  0456 2C                 INR  L          ;MAKE (H,L) POINT TO CHAR
     857  0457 AF                 XRA  A          ;ZERO ACCUMULATOR
     858  0458 77                 MOV  M,A        ;STORE A PLUS (+) SIGN
     859  0459 6B                 MOV  L,E        ;RESTORE L
     860  045A 16 18      FLOAT:  MVI  D,24       ;ENTER HERE TO FLOAT INTEGER
     861                  ;PRESERVING ORIGINAL SIGN IN (H,L)+3
     862                  ;SET UP CHARACTERISTIC
     863  045C C3 38 04           JMP  FXL2       ;GO FLOAT THE NUMBER
     864                  ;
     865                  ;
     866                  ;
     867                  ;
     868                  ;   SUBROUTINE ZCHK
     869                  ;
     870                  ;       THIS ROUTINE SETS THE ZERO FLAG IF IT DETECTS
     871                  ;       A FLOATING ZERO AT (H,L).
     872                  ;
     873                  ;   SUBROUTINE ZMCHK
     874                  ;
     875                  ;       THIS ROUTINE SETS THE ZERO FLAG IF IT DETECTS A
     876                  ;       ZERO MANTISSA AT (H,L)
     877                  ;
     878                  ZCHK:                   
     879  045F 2C         ZMCHK:  INR  L          ;SET L TO POINT LAST BYTE OF MANTISSA
     880  0460 2C                 INR  L          ;SET L TO POINT TO LAST BYTE OF MANTISSA
     881  0461 7E                 MOV  A,M        ;LOAD LEAST SIGNIFICANT BYTE
     882  0462 2D                 DCR  L          ;L POINTS TO MIDDLE BYTE
     883  0463 B6                 ORA  M          ;OR WITH LEAST SIGNFICANT BYTE
     884  0464 2D                 DCR  L          ;L POINTS TO MOST SIGNFICANT BYTE
     885                  ;OF MANTISSA (ORIGINAL VALUE)
     886  0465 B6                 ORA  M          ;OR IN MOST SIGNFICANT BYTE
     887  0466 C9                 RET             ;RETURNS WITH ZERO FLAG SET APPROPRIATELY
     888                  ;
     889                  ;  SUBROUTINE BCHK
     890                  ;
     891                  ;       THIS ROUTINE CHECKS (H,B) FOR FLOATING PT ZERO
     892                  ;
     893  0467 5D         BCHK:   MOV  E,L        ;SAVE LPTR IN E
     894  0468 68                 MOV  L,B        ;SET L=BPTR
     895  0469 CD 5F 04           CALL ZCHK       ;CHECK FOR ZERO
     896  046C 6B                 MOV  L,E        ;RESTORE L=LPTR
     897  046D C9                 RET             ;RETURN
     898                  ;
     899                  ;
     900                  ;   SUBROUTINE DLST
     901                  ;
     902                  ;       SHIFTS DBL WORD ONE PLACE LF
     903  046E 2C         DLST:   INR  L          
     904  046F 2C                 INR  L          ;/***TP
     905  0470 7E                 MOV  A,M        ;LOAD IT
     906  0471 B7                 ORA  A          ;KILL CARRY
     907  0472 17                 RAL             ;SHIFT IT LEFT
     908  0473 77                 MOV  M,A        ;STORE IT
     909  0474 2D                 DCR  L          
     910  0475 7E                 MOV  A,M        ;LOAD IT
     911  0476 17                 RAL             ;SHIFT IT LEFT
     912                  ;       IF CARRY SET BY FIRST SHIFT
     913                  ;       IT WILL BE IN LSB OF SECOND
     914  0477 77                 MOV  M,A        
     915  0478 2D                 DCR  L          ;/***TP EXTENSION
     916  0479 7E                 MOV  A,M        
     917  047A 17                 RAL             
     918  047B 77                 MOV  M,A        ;/***ALL DONE TP
     919  047C C9                 RET             
     920                  ;
     921                  ;
     922                  ;   SUBROUTINE DRST
     923                  ;
     924                  ;       SHIFTS DOUBLE WORD ONE PLACE
     925                  ;       TO THE RIGHT
     926                  ;           DOES NOT AFFECT D
     927                  ;
     928  047D 5D         DRST:   MOV  E,L        ;/***TP MODIFIED RIGHT SHIFT TP
     929  047E 7E                 MOV  A,M        ;LOAD FIRST WORD
     930  047F 1F                 RAR             ;ROTATE IT RIGHT
     931  0480 77                 MOV  M,A        ;STORE IT
     932  0481 2C                 INR  L          ;/*** TP
     933  0482 7E                 MOV  A,M        ;LOAD SECOND WORD
     934  0483 1F                 RAR             ;SHIFT IT RIGHT
     935  0484 77                 MOV  M,A        ;STORE IT
     936  0485 2C                 INR  L          ;/*** TP EXTENSION
     937  0486 7E                 MOV  A,M        
     938  0487 1F                 RAR             
     939  0488 77                 MOV  M,A        
     940  0489 6B                 MOV  L,E        ;/***TP - ALL DONE TP
     941  048A C9                 RET             
     942                  ;
     943                  ;
     944                  ;   SUBROUTINE DADD
     945                  ;
     946                  ;       ADDS TWO DOUBLE PRECISION
     947                  ;       WORDS, C=1 IF THERE IS OVRFLW
     948                  ;
     949  048B 5D         DADD:   MOV  E,L        ;SAVE BASE IN E
     950  048C 68                 MOV  L,B        ;BASE \3 TO L
     951  048D 2C                 INR  L          ;BASE \4 TO L
     952  048E 2C                 INR  L          ;/***TP
     953  048F 7E                 MOV  A,M        ;LOAD S MANTB
     954  0490 6B                 MOV  L,E        ;BASE TO L
     955  0491 2C                 INR  L          ;BASE \1 TO L
     956  0492 2C                 INR  L          ;/***TP
     957  0493 86                 ADD  M          ;ADD TWO MANTB]S
     958  0494 77                 MOV  M,A        ;STORE ANSWER
     959  0495 68                 MOV  L,B        ;/***TP EXTENSION
     960  0496 2C                 INR  L          
     961  0497 7E                 MOV  A,M        
     962  0498 6B                 MOV  L,E        
     963  0499 2C                 INR  L          
     964  049A 8E                 ADC  M          
     965  049B 77                 MOV  M,A        ;/***TP - ALL DONE
     966  049C 68                 MOV  L,B        ;BASE \3 TO L
     967  049D 7E                 MOV  A,M        ;MANTA OF S TO A
     968  049E 6B                 MOV  L,E        ;BASE TO L
     969  049F 8E                 ADC  M          ;ADD WITH CARRY
     970  04A0 77                 MOV  M,A        ;STORE ANSWER
     971  04A1 C9                 RET             
     972                  ;
     973                  ;
     974                  ;   SUBROUTINE DCLR
     975                  ;
     976                  ;       CLEARS TWO SUCCESSIVE
     977                  ;       LOCATIONS OF MEMORY
     978                  
     979  04A2 AF         DCLR:   XRA  A          
     980  04A3 77                 MOV  M,A        
     981  04A4 2C                 INR  L          
     982  04A5 77                 MOV  M,A        
     983  04A6 2C                 INR  L          ;/***TP EXTENSION
     984  04A7 77                 MOV  M,A        ;/***TP ZERO 3
     985  04A8 2D                 DCR  L          ;/***TP - ALL DONE
     986  04A9 2D                 DCR  L          
     987  04AA C9                 RET             
     988                  ;
     989                  ;
     990                  ;       /*****ALL NEW DSUB - SHORTER***
     991                  ;
     992                  ;   SUBROUTINE DSUB
     993                  ;
     994                  ;       DOUBLE PRECISION SUBTRACT
     995                  ;
     996  04AB 5D         DSUB:   MOV  E,L        ;SAVE BASE IN E
     997  04AC 2C                 INR  L          ;/***TP EXTENSION
     998  04AD 2C                 INR  L          ;/START WITH LOWS
     999  04AE 7E                 MOV  A,M        ;/GET ARG
    1000  04AF 68                 MOV  L,B        ;/NOW SET UP TO SUB
    1001  04B0 2C                 INR  L          
    1002  04B1 2C                 INR  L          
    1003  04B2 96                 SUB  M          ;/NOW DO IT
    1004  04B3 6B                 MOV  L,E        ;/NOW MUST PUT IT BACK
    1005  04B4 2C                 INR  L          
    1006  04B5 2C                 INR  L          
    1007  04B6 77                 MOV  M,A        ;/PUT BACK
    1008  04B7 2D                 DCR  L          ;/***TP - ALL DONE
    1009  04B8 7E                 MOV  A,M        ;/GET LOW OF LOP
    1010  04B9 68                 MOV  L,B        ;/SET TO BOP
    1011  04BA 2C                 INR  L          ;/SET TO BOP LOW
    1012  04BB 9E                 SBB  M          ;/GET DIFF. OF LOWS
    1013  04BC 6B                 MOV  L,E        ;/SAVE IN LOP LOW
    1014  04BD 2C                 INR  L          ;/TO LOP LOW
    1015  04BE 77                 MOV  M,A        ;/INTO RAM
    1016  04BF 2D                 DCR  L          ;/BACK UP TO LOP HIGH
    1017  04C0 7E                 MOV  A,M        ;/GET LOP HIGH
    1018  04C1 68                 MOV  L,B        ;/SET TO BOP HIGH
    1019  04C2 9E                 SBB  M          ;/SUB. WITH CARRY
    1020  04C3 6B                 MOV  L,E        ;/SAVE IN LOP HIGH
    1021  04C4 77                 MOV  M,A        ;/INTO RAM
    1022  04C5 C9                 RET             ;/ALL DONE - MUCH SHORTER
    1023                  ;
    1024                  ;   SUBROUTINE GCHAR
    1025                  ;
    1026                  ;       THIS SUBROUTINE RETURNS THE CHARACTERISTIC OF
    1027                  ;       THE FLOATING POINT NUMBER POINTED TO BY (H,L)
    1028                  ;       IN THE A REGISTER WITH ITS SIGN EXTENDED INTO THE
    1029                  ;       LEFTMOST BIT.
    1030                  ;
    1031                  ;   REGISTERS ON EXIT:
    1032                  ;
    1033                  ;       A = CHARACTERISTIC OF (H,L) WITH SIGN EXTENDED
    1034                  ;       L = (ORIGINAL L) + 3
    1035                  ;       B,C,D,E,H = SAME AS ON ENTRY
    1036                  ;
    1037  04C6 2C         GCHAR:  INR  L          ;MAKE (H,L) POINT TO CHAR
    1038  04C7 2C                 INR  L          ;MAKE (H,L) POINT TO CHAR
    1039  04C8 2C                 INR  L          ;MAKE (H,L) POINT TO CHAR
    1040  04C9 7E                 MOV  A,M        ;SET A=CHAR + MANTISSA SIGN
    1041  04CA E6 7F              ANI  177Q       ;GET RID OF MANTISSA SIGN BIT
    1042  04CC C6 40              ADI  100Q       ;PROPAGATE CHAR SIGN INTO LEFTMOST BIT
    1043  04CE EE 40              XRI  100Q       ;RESTORE ORIGINAL CHAR SIGN BIT
    1044  04D0 C9                 RET             ;RETURN WITH (H,L) POINTING TO THE
    1045                  ;CHAR = ORIGINAL (H,L)+3
    1046                  ;SOMEONE ELSE WILL CLEAN UP
    1047                  ;
    1048                  ;
    1049                  ;   SUBROUTINE CFCHE
    1050                  ;
    1051                  ;       THIS SUBROUTINE RETURNS THE CHARACTERISTICS OF THE
    1052                  ;       FLOATING POINT NUMBERS POINTED TO BY (H,L) AND
    1053                  ;       (H,B) IN THE A AND E REGISTERS RESPECTIVELY,
    1054                  ;       WITH THEIR SIGNS EXTENDED INTO THE LEFTMOST BIT.
    1055                  ;
    1056                  ;   REGISTERS ON EXIT:
    1057                  ;
    1058                  ;       A = CHARACTERISTIC OF (H,L) WITH SIGN EXTENDED
    1059                  ;       E = CHARACTERISTIC OF (H,B) WITH SIGN EXTENDED
    1060                  ;       B,C,H,L = SAME AS ON ENTRY
    1061                  ;       D = A
    1062                  ;
    1063  04D1 5D         CFCHE:  MOV  E,L        ;SAVE LPTR IN E
    1064  04D2 68                 MOV  L,B        ;SET L = BPTR
    1065  04D3 CD C6 04           CALL GCHAR      ;GET CHAR(H,B) WITH SIGN EXTENDED IN A
    1066  04D6 6B                 MOV  L,E        ;RESTORE L = LPTR
    1067  04D7 5F                 MOV  E,A        ;SET E=CHAR(H,B) WITH SIGN EXTENDED
    1068  04D8 CD C6 04           CALL GCHAR      ;SET A=CHAR(H,L) WITH SIGN EXTENDED
    1069  04DB 2D                 DCR  L          ;RESTORE L = LPTR
    1070  04DC 2D                 DCR  L          ;RESTORE L = LPTR
    1071  04DD 2D                 DCR  L          ;RESTORE L = LPTR
    1072  04DE 57                 MOV  D,A        ;SET D=A=CHAR(H,L) WITH SIGN EXTENDED
    1073  04DF C9                 RET             
    1074                  ;
    1075                  ;
    1076                  ;   SUBROUTINE CCMP
    1077                  ;
    1078                  ;       THIS SUBROUTINE COMPARES THE CHARACTERISTICS OF
    1079                  ;       FLOATING POINT NUMBERS POINTED TO BY (H,L) AND (H,B).
    1080                  ;       THE ZERO FLIP-FLOP IS SET IF CHAR(H,L) EQUALS
    1081                  ;       CHAR(H,B).  IF CHAR(H,L) IS LESS THAN CHAR(H,B) THEN
    1082                  ;       THE CARRY BIT WILL BE SET.
    1083                  ;
    1084                  ;   REGISTERS ON EXIT:
    1085                  ;
    1086                  ;       A = CHARACTERISTIC OF (H,L) WITH SIGN EXTENDED
    1087                  ;       E = CHARACTERISTIC OF (H,B) WITH SIGN EXTENDED
    1088                  ;       D = A
    1089                  ;       B,C,H,L = SAME AS ON ENTRY
    1090                  ;
    1091  04E0 CD D1 04   CCMP:   CALL CFCHE      ;FETCH CHARACTERTISTICS WITH SIGN EXTENDED
    1092                  ;INTO A (CHAR(H,L)) AND E (CHAR(H,B)) REGISTERS
    1093  04E3 57                 MOV  D,A        ;SAVE CHAR (H,L)
    1094  04E4 93                 SUB  E          ;SUBTRACT E (CHAR(H,B))
    1095  04E5 17                 RAL             ;ROTATE SIGN BIT INTO CARRY BIT
    1096  04E6 7A                 MOV  A,D        ;RESTORE A=CHAR(H,L)
    1097  04E7 C9                 RET             ;RETURN
    1098                  ;
    1099                  ;   ERROR RETURNS
    1100                  ;
    1101                  ;       THE FOLLOWING CODE IS USED TO RETURN VARIOUS
    1102                  ;       ERROR CONDITIONS.  IN EACH CASE A FLOATING POINT
    1103                  ;       NUMBER IS STORED IN  THE 4 WORDS POINTED TO BY (H,L)
    1104                  ;       AND A FLAG IS STORED IN THE ACCUMULATOR.
    1105                  ;
    1106                  ;       CONDITION   FLAG   RESULT (+)        RESULT (-)
    1107                  ;
    1108                  ;       UNDERFLOW    377   000 000 000 100   000 000 000 300
    1109                  ;       OVERFLOW     177   377 377 377 077   377 377 377 277
    1110                  ;       INDEFINITE   077   377 377 377 077   377 377 377 277
    1111                  ;       NORMAL       000   XXX XXX XXX XXX   XXX XXX XXX XXX
    1112                  ;       NORMAL ZERO  000   000 000 000 100   (ALWAYS RETURNS +0)
    1113                  ;
    1114                  ;   ENTRY POINTS:
    1115                  ;
    1116                  ;       WUND - WRITE UNDERFLOW
    1117                  ;       WOVR - WRITE OVERFLOW
    1118                  ;       WIND - WRITE INDEFINITE
    1119                  ;       WZER - WRITE NORMAL ZERO
    1120                  ;
    1121                  ;###S
    1122                  ;WFLT     MACRO   VMANT,VCHAR,VFLAG,LABEL  ;WRITE FLOATING NUMBER
    1123                  ;
    1124                  ;         MVI     D,VCHAR     ;LOAD CHARACTERISTIC INTO D REGISTER
    1125                  ;         CALL    WCHAR       ;WRITE CHARACTERISTIC
    1126                  ;LABEL::  MVI     A,VMANT     ;LOAD MANTISSA VALUE
    1127                  ;                             ;WE ASSUME HERE THAT ALL BYTES OF MANTISSA
    1128                  ;                             ;ARE THE SAME
    1129                  ;         CALL    WMANT       ;WRITE THE MANTISSA
    1130                  ;         MVI     A,VFLAG     ;SET ACCUMULATOR TO FLAG
    1131                  ;         ORA     A           ;SET FLAGS PROPERLY
    1132                  ;         RET                 ;RETURN (WMANT RESTORED (H,L))
    1133                  ;         ENDM
    1134                  ;
    1135                  ;WUND:   WFLT    0,100Q,377Q,UFLW1  ;WRITE UNDERFLOW
    1136  04E8 16 40      WUND:   MVI  D,100Q     ;LOAD CHARACTERISTIC INTO D REGISTER
    1137  04EA CD 24 05           CALL WCHAR      ;WRITE CHARACTERISTIC
    1138  04ED 3E 00      UFLW1:  MVI  A,0        ;LOAD MANTISSA VALUE
    1139                  ;WE ASSUME HERE THAT ALL BYTES OF MANTISSA
    1140                  ;ARE THE SAME
    1141  04EF CD 1D 05           CALL WMANT      ;WRITE THE MANTISSA
    1142  04F2 3E FF              MVI  A,377Q     ;SET ACCUMULATOR TO FLAG
    1143  04F4 B7                 ORA  A          ;SET FLAGS PROPERLY
    1144  04F5 C9                 RET             ;RETURN (WMANT RESTORED (H,L))
    1145                  ;WOVR:   WFLT    377Q,77Q,177Q,OFLW1  ;WRITE OVERFLOW
    1146  04F6 16 3F      WOVR:   MVI  D,77Q      ;LOAD CHARACTERISTIC INTO D REGISTER
    1147  04F8 CD 24 05           CALL WCHAR      ;WRITE CHARACTERISTIC
    1148  04FB 3E FF      OFLW1:  MVI  A,377Q     ;LOAD MANTISSA VALUE
    1149                  ;WE ASSUME HERE THAT ALL BYTES OF MANTISSA
    1150                  ;ARE THE SAME
    1151  04FD CD 1D 05           CALL WMANT      ;WRITE THE MANTISSA
    1152  0500 3E 7F              MVI  A,177Q     ;SET ACCUMULATOR TO FLAG
    1153  0502 B7                 ORA  A          ;SET FLAGS PROPERLY
    1154  0503 C9                 RET             ;RETURN (WMANT RESTORED (H,L))
    1155                  ;WIND:   WFLT    377Q,77Q,77Q,INDF1  ;WRITE INDEFINITE
    1156  0504 16 3F      WIND:   MVI  D,77Q      ;LOAD CHARACTERISTIC INTO D REGISTER
    1157  0506 CD 24 05           CALL WCHAR      ;WRITE CHARACTERISTIC
    1158  0509 3E FF      INDF1:  MVI  A,377Q     ;LOAD MANTISSA VALUE
    1159                  ;WE ASSUME HERE THAT ALL BYTES OF MANTISSA
    1160                  ;ARE THE SAME
    1161  050B CD 1D 05           CALL WMANT      ;WRITE THE MANTISSA
    1162  050E 3E 3F              MVI  A,77Q      ;SET ACCUMULATOR TO FLAG
    1163  0510 B7                 ORA  A          ;SET FLAGS PROPERLY
    1164  0511 C9                 RET             ;RETURN (WMANT RESTORED (H,L))
    1165                  ;###E
    1166                  ;
    1167  0512 2C         WZER:   INR  L          ;WRITE NORMAL ZERO
    1168  0513 2C                 INR  L          ;
    1169  0514 2C                 INR  L          ;
    1170  0515 36 40              MVI  M,100Q     ;STORE CHARACTERISTIC FOR ZERO
    1171  0517 AF                 XRA  A          ;ZERO ACCUMULATOR
    1172  0518 CD 1D 05           CALL WMANT      ;STORE ZERO MANTISSA
    1173  051B B7                 ORA  A          ;SET FLAGS PROPERLY
    1174  051C C9                 RET             ;RETURN
    1175                  ;
    1176                  ; ROUTINE TO WRITE MANTISSA FOR ERROR RETURNS
    1177                  ;
    1178  051D 2D         WMANT:  DCR  L          ;POINT LEAST SIGNIFICANT BYTE
    1179                  ;OF MANTISSA
    1180  051E 77                 MOV  M,A        ;STORE LSBYTE OF MANTISSA
    1181  051F 2D                 DCR  L          ;POINT TO NEXT LEAST SIGNIFICANT BYTE
    1182                  ;OF MANTISSA
    1183  0520 77                 MOV  M,A        ;STORE NLSBYTE OF MANTISSA
    1184  0521 2D                 DCR  L          ;POINT TO MOST SIGNIFICANT BYTE
    1185                  ;OF MANTISSA
    1186  0522 77                 MOV  M,A        ;STORE MSBYTE OF MANTISSA
    1187  0523 C9                 RET             ;RETURN (H,L) POINTS TO BEGINNING OF
    1188                  ;FLOATING POINT RESULT
    1189                  ;
    1190                  ; ROUTINE TO WRITE CHARACTERTIC FOR ERROR RETURNS
    1191                  ; NOTE:  WE PRESERVE ORIGINAL MANTISSA SIGN
    1192                  ; ON ENTRY D CONTAINS NEW CHARACTERTISTIC TO BE STORED.
    1193                  ;
    1194  0524 2C         WCHAR:  INR  L          ;SET (H,L) TO POINT TO CHARACTERISTIC
    1195  0525 2C                 INR  L          ;PART OF ABOVE
    1196  0526 2C                 INR  L          ;PART OF ABOVE
    1197  0527 7E                 MOV  A,M        ;LOAD CHARACTERISTIC A
    1198                  ;AND MANTISSA SIGN
    1199  0528 E6 80              ANI  200Q       ;JUST KEEP MANTISSA SIGN
    1200  052A B2                 ORA  D          ;OR IN NEW CHARACTERISTIC
    1201  052B 77                 MOV  M,A        ;STORE IT BACK
    1202  052C C9                 RET             ;RETURN WITH (H,L) POINT TO CHARACTERISTIC
    1203                  ;OF RESULT
    1204                  ;SOMEONE ELSE WILL FIX UP (H,L)
    1205                  ;
    1206                  ;   SUBROUTINE INDFC
    1207                  ;
    1208                  ;       THIS ROUTINE WRITES A FLOATING INDEFINITE, SETS
    1209                  ;       THIS WRITES WRITES A FLOATING POINT INDEFINITE
    1210                  ;       AT (H,C), SETS THE CONDITION FLAG AND RETURNS
    1211                  ;
    1212                  ;
    1213  052D 5D         INDFC:  MOV  E,L        ;SAVE LPTR IN E
    1214  052E 69                 MOV  L,C        ;SET L=CPTR SO (H,L)-ADDR OF RESULT
    1215  052F CD 04 05           CALL WIND       ;WRITE INDEFINITE
    1216  0532 6B                 MOV  L,E        ;RESTORE L=LPTR
    1217  0533 C9                 RET             ;RETURN
    1218                  ;
    1219                  ;
    1220                  ;   SUBROUTINE WZERC
    1221                  ;
    1222                  ;       THIS ROUTINE WRITES A NORMAL FLAOTING POINT ZERO
    1223                  ;       AT (H,C), SETS THE CONDITION FLAG AND RETURNS
    1224                  ;
    1225  0534 5D         WZERC:  MOV  E,L        ;SAVE LPTR IN E
    1226  0535 69                 MOV  L,C        ;SETL=CPTR SO (H,L)=ADDR OF RESULT
    1227  0536 CD 12 05           CALL WZER       ;WRITE NORMAL ZERO
    1228  0539 6B                 MOV  L,E        ;RESTORE L=LPTR
    1229  053A C9                 RET             ;RETURN
    1230                  ;
    1231                  ;   SUBROUTINE INCR
    1232                  ;
    1233                  ;       THIS SUBROUTINE INCREMENTS THE CHARACTERISTIC
    1234                  ;       OF THE FLOATING POINT NUMBER POINTED TO BY (H,L).
    1235                  ;       WE TEST FOR OVERFLOW AND SET APPROPRIATE FLAG.
    1236                  ;       (SEE ERRROR RETURNS).
    1237                  ;
    1238                  ;   REGISTERS ON EXIT:
    1239                  ;
    1240                  ;        A = CONDITION FLAG (SEE ERROR RETURNS)
    1241                  ;        D = CLOBBERED
    1242                  ;        B,C,H,L = SAME AS ON ENTRY
    1243                  ;
    1244  053B CD C6 04   INCR:   CALL GCHAR      ;GET CHAR WITH SIGN EXTENDED
    1245  053E FE 3F              CPI  MAXCH      ;COMPARE WITH MAX CHAR PERMITTED
    1246  0540 CA FB 04           JZ   OFLW1      ;INCREMENT WOULD CAUSE OVERFLOW
    1247  0543 57                 MOV  D,A        ;SAVE IT IN D
    1248  0544 14                 INR  D          ;INCREMENT IT
    1249  0545 C3 4B 05           JMP  INCR2      ;JUMP AROUND ALTERNATE ENTRY POINT
    1250  0548 2C         INCR3:  INR  L          ;COME HERE TO STORE CHARACTERISTIC
    1251  0549 2C                 INR  L          ;POINT (H,L) TO CHAR
    1252  054A 2C                 INR  L          ;POINT (H,L) TO CHAR
    1253  054B 3E 7F      INCR2:  MVI  A,177Q     
    1254  054D A2                 ANA  D          ;KILL SIGN BIT
    1255  054E 57                 MOV  D,A        ;BACK TO D
    1256  054F 7E                 MOV  A,M        ;NOW SIGN IT
    1257  0550 E6 80              ANI  200Q       ;GET MANTISSA SIGN
    1258  0552 B2                 ORA  D          ;PUT TOGETHER
    1259  0553 77                 MOV  M,A        ;STORE IT BACK
    1260  0554 2D                 DCR  L          ;NOW BACK TO BASE
    1261  0555 2D                 DCR  L          ;/***TP
    1262  0556 2D                 DCR  L          
    1263  0557 AF         SCCFG:  XRA  A          ;SET SUCCESS FLAG
    1264  0558 C9                 RET             
    1265                  ;
    1266                  ;   SUBROUTINE DECR
    1267                  ;
    1268                  ;       THIS SUBROUTINE DECREMENTS THE CHARACTERISTIC
    1269                  ;       OF THE FLOATING POINT NUMBER POINTED TO BY (H,L).
    1270                  ;       WE TEST FOR UNDERFLOW AND SET APPROPRIATE FLAG.
    1271                  ;       (SEE ERRROR RETURNS).
    1272                  ;
    1273                  ;   REGISTERS ON EXIT:
    1274                  ;
    1275                  ;        A = CONDITION FLAG (SEE ERROR RETURNS)
    1276                  ;        D = CLOBBERED
    1277                  ;        B,C,H,L = SAME AS ON ENTRY
    1278                  ;
    1279  0559 CD C6 04   DECR:   CALL GCHAR      ;GET CHAR WITH SIGN EXTENDED
    1280  055C FE C0              CPI  MINCH      ;COMPARE WITH MIN CHAR PERMITTED
    1281  055E CA ED 04           JZ   UFLW1      ;DECREMENT WOULD CAUSE UNDERFLOW
    1282  0561 57                 MOV  D,A        ;SAVE CHARACTERSTIC IN D
    1283  0562 15                 DCR  D          ;DECREMENT CHARACTERISTIC
    1284  0563 C3 4B 05           JMP  INCR2      ;GO STORE IT BACK
    1285                  ;
    1286                  ;   SUBROUTINE AORS
    1287                  ;
    1288                  ;       RETURN S=1 IF BASE 6
    1289                  ;       HAS A 1 IN MSB
    1290                  ;
    1291  0566 5D         AORS:   MOV  E,L        ;SAVE BASE
    1292  0567 69                 MOV  L,C        ;BASE 6 TO L
    1293  0568 7E                 MOV  A,M        ;LOAD IT
    1294  0569 B7                 ORA  A          ;SET FLAGS
    1295  056A 6B                 MOV  L,E        ;RESTORE BASE
    1296  056B C9                 RET             
    1297                  ;
    1298                  ;
    1299                  ;   SUBROUTINE TSTR
    1300                  ;
    1301                  ;       CHECKS C PTR TO SEE IF
    1302                  ;       NLSB !
    1303                  ;       RETURNS Z=1 IF NOT
    1304                  ;       DESTROYS E,D
    1305                  ;
    1306  056C 5D         TSTR:   MOV  E,L        ;SAVE BASE
    1307  056D 69                 MOV  L,C        ;C PTR TO L
    1308  056E 16 02              MVI  D,2        ;MASK TO D
    1309  0570 7E                 MOV  A,M        ;LOAD VALUE
    1310  0571 6B                 MOV  L,E        ;RESTORE BASE
    1311  0572 A2                 ANA  D          ;AND VALUE WITH MASK
    1312  0573 C9                 RET             
    1313                  ;
    1314                  ;
    1315                  ;   SUBROUTINE ACPR
    1316                  ;
    1317                  ;       STORES A IN LOCATION OF CPTR
    1318                  ;       LPTR IN E
    1319                  ;
    1320  0574 5D         ACPR:   MOV  E,L        ;SAVE LPTR
    1321  0575 69                 MOV  L,C        ;CPTR TO L
    1322  0576 77                 MOV  M,A        ;STORE A
    1323  0577 6B                 MOV  L,E        ;RESTORE BASE
    1324  0578 C9                 RET             
    1325                  ;
    1326                  ;
    1327                  ;   SUBROUTINE DCMP
    1328                  ;
    1329                  ;       COMPARES TWO DOUBLE LENGTH
    1330                  ;       WORDS
    1331                  ;
    1332  0579 7E         DCMP:   MOV  A,M        ;NUM MANTA TO A
    1333  057A 5D                 MOV  E,L        ;SAVE BASE IN E
    1334  057B 68                 MOV  L,B        ;BASE 3 TO L
    1335  057C BE                 CMP  M          ;COMPARE WITH DEN MANTA
    1336  057D 6B                 MOV  L,E        ;RETURN BASE TO L
    1337  057E C0                 RNZ             ;RETURN IF NOT THE SAME
    1338  057F 2C                 INR  L          ;L TO NUM MANTB
    1339  0580 7E                 MOV  A,M        ;LOAD IT
    1340  0581 68                 MOV  L,B        ;DEN MANTB ADD TO L
    1341  0582 2C                 INR  L          ;BASE 4 TO L
    1342  0583 BE                 CMP  M          
    1343  0584 6B                 MOV  L,E        
    1344  0585 C0                 RNZ             ;/***TP EXTENSION
    1345  0586 2C                 INR  L          ;NOW CHECK BYTE 3
    1346  0587 2C                 INR  L          
    1347  0588 7E                 MOV  A,M        ;GET FOR COMPARE
    1348  0589 68                 MOV  L,B        
    1349  058A 2C                 INR  L          
    1350  058B 2C                 INR  L          ;BYTE 3 NOW
    1351  058C BE                 CMP  M          ;COMPARE
    1352  058D 6B                 MOV  L,E        ;/***TP - ALL DONE
    1353  058E C9                 RET             
    1354                  ;
    1355                  ;
    1356                  ;   SUBROUTINE DIVC
    1357                  ;
    1358                  ;       PERFORMS ONE CYCLE OF DOUBLE
    1359                  ;       PRECISION FLOATING PT DIVIDE
    1360                  ;       ENTER AT ENT1 ON FIRST CYCLE
    1361                  ;       ENTER AT ENT2 ALL THEREAFTER
    1362                  ;
    1363  058F CD 6E 04   ENT2:   CALL DLST       ;SHIFT MOVING DIVIDEND
    1364  0592 DA 9C 05           JC   OVER       ;IF CARRY=1,NUM.GT.D
    1365  0595 CD 79 05   ENT1:   CALL DCMP       ;COMPARE NUM WITH DEN
    1366  0598 D2 9C 05           JNC  OVER       ;IF CARRY NOT SET,NUM.GE.DEN
    1367  059B C9                 RET             
    1368  059C CD AB 04   OVER:   CALL DSUB       ;CALL DOUBLE SUBTRACT
    1369  059F 5D                 MOV  E,L        ;SAVE BASE IN E
    1370  05A0 69                 MOV  L,C        ;BASE 6 TO L
    1371  05A1 2C                 INR  L          ;BASE 7 TO L
    1372  05A2 2C                 INR  L          ;/***TP
    1373  05A3 7E                 MOV  A,M        
    1374  05A4 C6 01              ADI  1          ;ADD 1
    1375  05A6 77                 MOV  M,A        ;PUT IT BACK
    1376  05A7 6B                 MOV  L,E        ;RESTORE BASE TO L
    1377  05A8 C9                 RET             
    1378                  ;
    1379                  ;
    1380                  ;   SUBROUTINE LXFR
    1381                  ;
    1382                  ;       MOVES CPTR TO EPTR
    1383                  ;       MOVES 3 WORDS IF ENTER AT LXFR
    1384                  ;
    1385  05A9 16 04      LXFR:   MVI  D,4        ;MOVE 4 WORDS
    1386  05AB 69         REP5:   MOV  L,C        ;CPTR TO L
    1387  05AC 7E                 MOV  A,M        ;CPTR> TO A
    1388  05AD 6B                 MOV  L,E        ;EPTR TO L
    1389  05AE 77                 MOV  M,A        
    1390  05AF 0C                 INR  C          ;INCREMENT C
    1391  05B0 1C                 INR  E          ;INCREMENT E TO NEXT
    1392  05B1 15                 DCR  D          ;TEST FOR DONE
    1393  05B2 C2 AB 05           JNZ  REP5       ;GO FOR FOR TILL D=0
    1394  05B5 7B                 MOV  A,E        ;NOW RESET C AND E
    1395  05B6 D6 04              SUI  4          ;RESET BACK BY 4
    1396  05B8 5F                 MOV  E,A        ;PUT BACK IN E
    1397  05B9 79                 MOV  A,C        ;NOW RESET C
    1398  05BA D6 04              SUI  4          ;BY 4
    1399  05BC 4F                 MOV  C,A        ;BACK TO C
    1400  05BD C9                 RET             ;DONE
    1401                  ;
    1402                  ;   SUBROUTINE LDCP
    1403                  ;
    1404                  ;       THIS SUBROUTINE COMPUTES THE CHARACTERISTIC
    1405                  ;       FOR THE FLOATING DIVIDE ROUTINE
    1406                  ;
    1407                  ;   REGISTERS ON EXIT:
    1408                  ;
    1409                  ;       A = CONDITION FLAG (SEE ERROR RETURNS)
    1410                  ;       D,E = GARBAGE
    1411                  ;       B,C,H,L = SAME AS ON ENTRY
    1412                  ;
    1413                  ;   REGISTERS ON ENTRY:
    1414                  ;
    1415                  ;       (H,B) = ADDRESS OFF DIVISOR
    1416                  ;       (H,C) = ADDRESS OF QUOTIENT
    1417                  ;       (H,L) = ADDRESS OF DIVIDEND
    1418                  ;
    1419  05BE CD D1 04   LDCP:   CALL CFCHE      ;SET E=CHAR(H,B), A=CHAR(H,L)
    1420  05C1 93                 SUB  E          ;SUBTRACT TO GET NEW CHARACTERISTIC
    1421  05C2 C3 C9 05           JMP  CCHK       ;GO CHECK FOR OVER/UNDERFLOW
    1422                  ;AND STORE CHARACTERTISTIC
    1423                  ;
    1424                  ;
    1425                  ;   SUBROUTINE LMCP
    1426                  ;
    1427                  ;       THIS SUBROUTINE COMPUTES THE CHARACTERISTIC
    1428                  ;       FOR THE FLOATING MULTIPLY ROUTINE.
    1429                  ;
    1430                  ;   REGISTERS ON EXIT:
    1431                  ;
    1432                  ;       A = CONDITION FLAG (SEE ERROR RETURNS)
    1433                  ;       D,E = GARBAGE
    1434                  ;       B,C,H,L = SAME AS ON ENTRY
    1435                  ;
    1436                  ;   REGISTERS ON ENTRY:
    1437                  ;
    1438                  ;       (H,B) = ADDRESS OFF MULTIPLICAND
    1439                  ;       (H,C) = ADDRESS OF PRODUCT
    1440                  ;       (H,L) = ADDRESS OF MULTIPLIER
    1441                  ;
    1442  05C5 CD D1 04   LMCP:   CALL CFCHE      ;SET E=CHAR(H,B), A=CHAR(H,L)
    1443  05C8 83                 ADD  E          ;ADD TO GET NEW CHARACTERISTIC
    1444                  ;NOW FALL INTO THE ROUTINE
    1445                  ;WHICH CHECKS FOR OVER/UNDERFLOW
    1446                  ;AND STORE CHARACTERTISTIC
    1447                  ;
    1448                  ;
    1449                  ;   SBUROUTINE CCHK
    1450                  ;
    1451                  ;       THIS SUBROUTINE CHECKS A CHARACTERISTIC IN
    1452                  ;       THE ACCUMULATOR FOR OVERFLOW OR UNDERFLOW.
    1453                  ;       IT THEN STORES THE CHARACTERISTIC, PRESERVING
    1454                  ;       THE PREVIOUSLY COMPUTED MANTISSA SIGN.
    1455                  ;
    1456                  ;  REGISTERS ON ENTRY:
    1457                  ;
    1458                  ;       (H,L) = ADDRESS OF ONE OPERAND
    1459                  ;       (H,B) = ADDRESS OF OTHER OPERAND
    1460                  ;       (H,C) = ADDRESS OF RESULT
    1461                  ;       A     = NEW CHARACTERISTIC OF  RESULT
    1462                  ;
    1463                  ;   REGISTERS ON EXIT:
    1464                  ;
    1465                  ;       A = CONDITION FLAG (SEE ERROR RETURNS)
    1466                  ;       D,E = GARBAGE
    1467                  ;       B,C,H,L = SAME AS ON ENTRY
    1468                  ;
    1469                  CCHK:                   ;ENTER HERE TO CHECK CHARACTERISTIC
    1470  05C9 FE 40              CPI  100Q       ;CHECK FOR 0 TO +63
    1471  05CB DA D8 05           JC   STORC      ;JUMP IF OKAY
    1472  05CE FE 80              CPI  200Q       ;CHECK FOR +64 TO +127
    1473  05D0 DA E0 05           JC   OFLWC      ;JUMP IF OVERFLOW
    1474  05D3 FE C0              CPI  300Q       ;CHECK FOR -128 TO -65
    1475  05D5 DA E7 05           JC   UFLWC      ;JUMP IF UNDERFLOW
    1476  05D8 5D         STORC:  MOV  E,L        ;SAVE L IN E
    1477  05D9 69                 MOV  L,C        ;LET L POINT TO RESULT
    1478  05DA 57                 MOV  D,A        ;SAVE CHARACTERISTIC IN D
    1479  05DB CD 48 05           CALL INCR3      ;STORE CHARACTERISTIC
    1480  05DE 6B                 MOV  L,E        ;RESTORE L
    1481  05DF C9                 RET             ;RETURN
    1482                  ;
    1483                  ;   SUBROUTINE OFLWC
    1484                  ;
    1485                  ;       THIS ROUTINE WRITES A FLOATING POINT OVERFLOW AT (H,C)
    1486                  ;       SETS THE CONDITION FLAG, AND RETURNS.
    1487                  ;
    1488  05E0 5D         OFLWC:  MOV  E,L        ;SAVE L IN E
    1489  05E1 69                 MOV  L,C        ;SET L=CPTR, SO (H,L)=ADDR OF RESULT
    1490  05E2 CD F6 04           CALL WOVR       ;WRITE OUT OVERFLOW
    1491  05E5 6B                 MOV  L,E        ;RESTORE L
    1492  05E6 C9                 RET             ;RETURN
    1493                  ;
    1494                  ;   SUBROUTINE UFLWC
    1495                  ;
    1496                  ;       THIS ROUTINE WRITES A FLOATING POINT UNDERFLOW AT (H,C)
    1497                  ;       SETS THE CONDITION FLAG, AND RETURNS.
    1498                  ;
    1499  05E7 5D         UFLWC:  MOV  E,L        ;SAVE L IN E
    1500  05E8 69                 MOV  L,C        ;SET L=CPTR, SO (H,L)=ADDR OF RESULT
    1501  05E9 CD E8 04           CALL WUND       ;WRITE OUT UNDEFLOW
    1502  05EC 6B                 MOV  L,E        ;RESTORE L
    1503  05ED C9                 RET             ;RETURN
    1504                  ;
    1505                  ;
    1506                  ;   SUBROUTINE CSIGN
    1507                  ;
    1508                  ;       THIS SUBROUTINE COMPUTES AND STORE THE MANTISSA
    1509                  ;       SIGN FOR THE FLOATING MULTIPLY AND DIVIDE ROUTINES
    1510                  ;
    1511                  ;   REGISTERS ON ENTRY:
    1512                  ;
    1513                  ;       (H,L) = ADDRESS OF ONE OPERAND
    1514                  ;       (H,B) = ADDRESS OF OTHER OPERAND
    1515                  ;       (H,C) = ADDRESS OF RESULT
    1516                  ;
    1517                  ;   REGISTERS ON EXIT:
    1518                  ;
    1519                  ;       A,D,E = GARBAGE
    1520                  ;       B,C,H,L = SAME AS ON ENTRY
    1521                  ;
    1522                  ;
    1523  05EE CD FE 05   CSIGN:  CALL MSFH       ;SET A=SIGN(H,L), E=SIGN(H,B)
    1524  05F1 AB                 XRA  E          ;EXCLUSIVE OR SIGNS TO GET NEW SIGN
    1525  05F2 CD F6 05           CALL CSTR       ;STORE SIGN INTO RESULT
    1526  05F5 C9                 RET             ;RETURN
    1527                  ;
    1528                  ;
    1529                  ;   SUBROUTINE CSTR
    1530                  ;
    1531                  ;       STORES VALUE IN A IN
    1532                  ;       CPTR 2
    1533                  ;       PUTS LPTR IN E
    1534                  ;
    1535  05F6 5D         CSTR:   MOV  E,L        ;SAVE LPTR IN E
    1536  05F7 69                 MOV  L,C        ;CPTR TO L
    1537  05F8 2C                 INR  L          ;CPTR\2
    1538  05F9 2C                 INR  L          ;TO L
    1539  05FA 2C                 INR  L          ;/***TP
    1540  05FB 77                 MOV  M,A        ;STORE ANSWER
    1541  05FC 6B                 MOV  L,E        ;LPTR BACK TO L
    1542  05FD C9                 RET             
    1543                  ;
    1544                  ;   SUBROUTINE MSFH
    1545                  ;
    1546                  ;       THIS SUBROUTINE FETCHES THE SIGNS OF THE MANTISSAS
    1547                  ;       OF THE FLOATING POINT NUMBERS POINTED TO BY (H,L)
    1548                  ;       AND (H,B) INTO THE A AND E REGISTERS RESPECTIVELY.
    1549                  ;
    1550                  ;   REGISTERS ON EXIT:
    1551                  ;
    1552                  ;       A = SIGN  OF MANTISSA OF (H,L)
    1553                  ;       E = SIGN OF MANTISSA OF (H,B)
    1554                  ;       B,C,D,H,L = SAME AS ON ENTRY
    1555                  ;
    1556  05FE 5D         MSFH:   MOV  E,L        ;SAVE LPTR
    1557  05FF 68                 MOV  L,B        ;BPTR TO L
    1558  0600 2C                 INR  L          ;BPTR\2
    1559  0601 2C                 INR  L          ;/***TP
    1560  0602 2C                 INR  L          ;TO L
    1561  0603 7E                 MOV  A,M        ;BPTR 2>TO A
    1562  0604 E6 80              ANI  128        ;SAVE MANT SIGN
    1563  0606 6B                 MOV  L,E        ;LPTR BACK TO L
    1564  0607 5F                 MOV  E,A        ;STORE BPTR MANT SIGN
    1565  0608 2C                 INR  L          ;LPTR\2
    1566  0609 2C                 INR  L          ;/***TP
    1567  060A 2C                 INR  L          ;TO L
    1568  060B 7E                 MOV  A,M        ;LPTR\2>TO A
    1569  060C E6 80              ANI  128        ;SAVE LPTR MANT SIGN
    1570  060E 2D                 DCR  L          ;LPTR BACK
    1571  060F 2D                 DCR  L          ;TO L
    1572  0610 2D                 DCR  L          ;/***TP
    1573  0611 C9                 RET             
    1574                  ;
    1575                  ;
    1576                  ;   SUBROUTINE BCTL
    1577                  ;
    1578                  ;           MOVES BPTR CHAR TO LPTR CHAR
    1579                  ;           DESTROYS E
    1580                  ;
    1581  0612 5D         BCTL:   MOV  E,L        ;LPTR TO E
    1582  0613 68                 MOV  L,B        ;BPTR TO L
    1583  0614 2C                 INR  L          ;BPTR 2
    1584  0615 2C                 INR  L          ;/***TP
    1585  0616 2C                 INR  L          ;TO L
    1586  0617 7E                 MOV  A,M        ;BPTR CHAR TO A
    1587  0618 6B                 MOV  L,E        ;LPTR TO L
    1588  0619 2C                 INR  L          ;LPTR 2
    1589  061A 2C                 INR  L          ;TO L
    1590  061B 2C                 INR  L          ;/***TP
    1591  061C 77                 MOV  M,A        ;STORE BPTR CHAR IN LPTR CHAR
    1592  061D 6B                 MOV  L,E        ;LPTR TO L
    1593  061E C9                 RET             
    1594                  ;
    1595                  ;
    1596                  ;******************************************************
    1597                  ;       ///SQUARE ROOT
    1598                  ;          ***************
    1599                  ;       THE L REG PTS TO THE NUMBER TO BE
    1600                  ;       OPERATED ON.
    1601                  ;       THE B REG PTS TO THE LOC WHERE
    1602                  ;       THE RESULT IS TO BE STORED
    1603                  ;       THE C REG PTS TO 17(10) SCRATCH 
    1604                  ;       AREA.
    1605                  ;       WHERE:
    1606                  ;       C = INTERATION COUNT
    1607                  ;       C+1 = L REG
    1608                  ;       C+2 = B REG
    1609                  ;       C+3 TO C+6 = INTRL REG 1
    1610                  ;       C+7 TO C+10 = INTRL REG 2
    1611                  ;       C+11 TO C+14 = INTRL REG 3
    1612                  ;       C+15 = 
    1613                  ;******************************************************
    1614  061F 7D         DSQRT:  MOV  A,L        ;STORE L IN
    1615  0620 69                 MOV  L,C        ;2ND WRD SCRTCH
    1616  0621 36 00              MVI  M,0        ;INITIALIZE ITER COUNT
    1617  0623 2C                 INR  L          
    1618  0624 77                 MOV  M,A        
    1619  0625 2C                 INR  L          ;STR B IN 3RD
    1620  0626 70                 MOV  M,B        ;WRD OF SCRTCH
    1621  0627 2C                 INR  L          ;SET C TO INTRL
    1622  0628 4D                 MOV  C,L        ;REG I
    1623  0629 6F                 MOV  L,A        ; SET L PRT AT
    1624  062A 7C                 MOV  A,H        ;SET REGS FOR COPY
    1625  062B CD 3B 08           CALL COPY       ; CPY TC INTRL REG1
    1626  062E CD D9 07           CALL GCHR       ;PUT CHR IN A
    1627  0631 47                 MOV  B,A        ;MAKE COPY
    1628  0632 E6 80              ANI  200Q       ;OK NEG
    1629  0634 C2 9E 06           JNZ  ERSQ       
    1630  0637 78                 MOV  A,B        
    1631  0638 E6 40              ANI  100Q       ;OK NEG EXP
    1632  063A 78                 MOV  A,B        
    1633  063B CA 47 06           JZ   EPOS       
    1634  063E 1F                 RAR             ;DIV BY 2
    1635  063F E6 7F              ANI  177Q       
    1636  0641 F6 40              ORI  100Q       ;SET SIGN BIT
    1637  0643 77                 MOV  M,A        ;SAVE 1ST APPROX
    1638  0644 C3 4B 06           JMP  AGN4       
    1639  0647 1F         EPOS:   RAR             ;DIV BY 2
    1640  0648 E6 7F              ANI  177Q       
    1641  064A 77                 MOV  M,A        ;SAVE IST APPROX
    1642  064B 69         AGN4:   MOV  L,C        ;SET REGS
    1643  064C 79                 MOV  A,C        ;TO COPY 1ST
    1644  064D C6 04              ADI  4          ;APPROX
    1645  064F 4F                 MOV  C,A        ;INTO INTRL REG 2
    1646  0650 7C                 MOV  A,H        ;FRM INTRL REG1
    1647  0651 CD 3B 08           CALL COPY       
    1648  0654 79                 MOV  A,C        
    1649  0655 D6 04              SUI  4          ;MULTIPLY INTRL REG 1
    1650  0657 6F                 MOV  L,A        
    1651  0658 41                 MOV  B,C        ;TIME INTRL REG2
    1652  0659 C6 08              ADI  10Q        ;PLASE RESULT IN
    1653  065B 4F                 MOV  C,A        ;INMTRL REG 3
    1654  065C CD E4 03           CALL LMUL       
    1655  065F 79                 MOV  A,C        
    1656  0660 D6 08              SUI  10Q        ;COPY ORG INTO
    1657  0662 4F                 MOV  C,A        ;INTRL REG 1
    1658  0663 D6 02              SUI  2          
    1659  0665 6F                 MOV  L,A        
    1660  0666 6E                 MOV  L,M        
    1661  0667 7C                 MOV  A,H        
    1662  0668 CD 3B 08           CALL COPY       
    1663  066B 79                 MOV  A,C        
    1664  066C C6 08              ADI  10Q        ;ADD INTRL
    1665  066E 6F                 MOV  L,A        ;REG3 OT
    1666  066F 41                 MOV  B,C        ;INTRL REG1
    1667  0670 C6 04              ADI  4          ;ANS TO INTRL
    1668  0672 4F                 MOV  C,A        ;REG3
    1669  0673 CD E1 02           CALL LADD       
    1670  0676 7D                 MOV  A,L        
    1671  0677 D6 04              SUI  4          ;DIV INTRL REG 3
    1672  0679 47                 MOV  B,A        ;BY INTRL REG 2
    1673  067A D6 04              SUI  4          ;PUT ANSR IN INTRL
    1674  067C 4F                 MOV  C,A        ;REG1
    1675  067D CD 85 02           CALL LDIV       
    1676  0680 CD D9 07           CALL GCHR       
    1677  0683 D6 01              SUI  1          
    1678  0685 E6 7F              ANI  177Q       
    1679  0687 77                 MOV  M,A        
    1680  0688 79                 MOV  A,C        
    1681  0689 D6 03              SUI  3          ;C PTS TO INTRL REG 1
    1682  068B 6F                 MOV  L,A        ;GET INTR
    1683  068C 46                 MOV  B,M        ;COUNT NOW INCR
    1684  068D 04                 INR  B          
    1685  068E 70                 MOV  M,B        
    1686  068F 78                 MOV  A,B        
    1687  0690 FE 05              CPI  5          ;IF = 5 RTN ANS
    1688  0692 C2 4B 06           JNZ  AGN4       ;OTERHWISE CONT
    1689  0695 69                 MOV  L,C        
    1690  0696 2D         ALDN:   DCR  L          ;COPY ANS INTO
    1691  0697 4E                 MOV  C,M        ;LOC REQUESTED
    1692  0698 2C                 INR  L          
    1693  0699 7C                 MOV  A,H        
    1694  069A CD 3B 08           CALL COPY       
    1695  069D C9                 RET             
    1696  069E 69         ERSQ:   MOV  L,C        
    1697  069F CD 12 05           CALL WZER       ;WRITE A FLOATING ZERO
    1698  06A2 C3 96 06           JMP  ALDN       
    1699                  ;
    1700                  ;
    1701                  ;******************************************************
    1702                  ;       ///SWAP TWO NUMBERS IN SAME MEMORY PAGE
    1703                  ;          ****************
    1704                  ;       THE HL PTS TO THE FIRST NUMBER.
    1705                  ;       THE C REG PTS TO THE SECOND NUMBER.
    1706                  ;          ON RETURN B=H, C=C+4, L=L+4.
    1707                  ;******************************************************
    1708  06A5 D5         LXCHG:  PUSH D          
    1709  06A6 44                 MOV  B, H       
    1710  06A7 16 04              MVI  D, 4       ;COUNTER
    1711  06A9 0A         LXCHG1: LDAX B          
    1712  06AA 77                 MOV  M, A       ;MOVE 4 BYTES
    1713  06AB 2C                 INR  L          
    1714  06AC 0C                 INR  C          
    1715  06AD 15                 DCR  D          
    1716  06AE C2 A9 06           JNZ  LXCHG1     
    1717  06B1 D1                 POP  D          
    1718  06B2 C9                 RET             
    1719                  ;
    1720                  ;
    1721                  ;******************************************************
    1722                  ;       //// FLOATING POINT CONSTANTS
    1723                  ;******************************************************
    1724  06B3 C3 50 00   TEN5:   DB   303Q,120Q,0Q,21Q; 100000 (10)
          06B6 11      
    1725  06B7 9C 40 00   TEN4:   DB   234Q,100Q,0Q,16Q; 10000 (10)
          06BA 0E      
    1726  06BB FA 00 00   TEN3:   DB   372Q,0Q,0Q,12Q; 1000 (10)
          06BE 0A      
    1727  06BF C8 00 00   TEN2:   DB   310Q,0Q,0Q,7Q; 100 (10)
          06C2 07      
    1728  06C3 A0 00 00   TEN:    DB   240Q,0Q,0Q,4Q; 10 (10)
          06C6 04      
    1729  06C7 80 00 00   ONE:    DB   200Q,0Q,0Q,1Q; 1 (10)
          06CA 01      
    1730  06CB 00 00 00   ZERO:   DB   0Q,0Q,0Q,100Q; 0
          06CE 40      
    1731  06CF FF FF 00   MAXINT: DB   377Q,377Q,0Q,17Q;32767 (10)
          06D2 0F      
    1732                  ;
    1733                  ;
    1734                  ;******************************************************
    1735                  ;       //// 5 DIGIT FLOATING PT. OUTPUT
    1736                  ;******************************************************
    1737                  ;
    1738                  ;       *******ROUTINE TO CONVERT FLOATING PT.
    1739                  ;       ***NUMBERS TO ASCII AND OUTPUT THEM
    1740                  ;       ***HL POINTS TO THE NUMBER TO BE OUTPUT
    1741                  ;       ***C POINTS TO A 17 OCTAL-WORD SCRATCH AREA.
    1742                  ;
    1743  06D3 CD 5F 04   CVRT:   CALL ZCHK       ;CHECK FOR NEW ZERO
    1744  06D6 C2 EB 06           JNZ  NNZRO      ;NOT ZERO
    1745  06D9 0C                 INR  C          ;IT WAS, OFFSET C BY 2
    1746  06DA 0C                 INR  C          
    1747  06DB 69                 MOV  L,C        
    1748  06DC CD 12 05           CALL WZER       ;WRITE ZERO
    1749  06DF CD CC 07           CALL SIGN       ;SEND SPACE ON POS ZERO
    1750  06E2 2C                 INR  L          ;PNT TO DECIMAL EXPONENT
    1751  06E3 2C                 INR  L          
    1752  06E4 2C                 INR  L          
    1753  06E5 2C                 INR  L          
    1754  06E6 AF                 XRA  A          ;SET IT TO ZERO
    1755  06E7 77                 MOV  M,A        
    1756  06E8 C3 4A 07           JMP  MDSKP      ;OUTPUT IT
    1757  06EB 56         NNZRO:  MOV  D,M        ;GET THE NUMBER TO CONVERT
    1758  06EC 2C                 INR  L          
    1759  06ED 46                 MOV  B,M        
    1760  06EE 2C                 INR  L          
    1761  06EF 5E                 MOV  E,M        
    1762  06F0 2C                 INR  L          ;4 WORD***TP
    1763  06F1 7E                 MOV  A,M        ;/***TP
    1764  06F2 0C                 INR  C          ;OFFSET SCRATCH POINTER BY 2
    1765  06F3 0C                 INR  C          
    1766  06F4 69                 MOV  L,C        ;L NOT NEEDED ANY MORE
    1767  06F5 72                 MOV  M,D        ;SAVE NUMBER IN SCRATCH
    1768  06F6 2C                 INR  L          
    1769  06F7 70                 MOV  M,B        
    1770  06F8 2C                 INR  L          
    1771  06F9 73                 MOV  M,E        ;/***TP
    1772  06FA 2C                 INR  L          ;/***TP
    1773  06FB 47                 MOV  B,A        ;SAVE COPY OF CHAR & SIGN
    1774  06FC E6 7F              ANI  177Q       ;GET ONLY CHAR.
    1775  06FE 77                 MOV  M,A        ;SAVE ABS(NUMBER)
    1776  06FF FE 40              CPI  100Q       ;CK FOR ZERO
    1777  0701 CA 08 07           JZ   NZRO       
    1778  0704 D6 01              SUI  1          ;GET SIGN OF DEC. EXP
    1779  0706 E6 40              ANI  100Q       ;GET SIGN OF CHAR.
    1780  0708 07         NZRO:   RLC             ;MOVE IT TO SIGN POSITION
    1781  0709 2C                 INR  L          ;MOVE TO DECIMAL EXP.
    1782  070A 77                 MOV  M,A        ;SAVE SIGN OF EXP.
    1783  070B 78                 MOV  A,B        ;GET MANT. SIGH BACK
    1784  070C CD CC 07           CALL SIGN       ;OUTPUT SIGN
    1785  070F 2E B3              MVI  L,LOW TEN5 ;TRY MULT. OR DIV. BY 100000 FIRST
    1786  0711 CD 2D 08           CALL COPT       ;MAKE A COPY IN RAM
    1787  0714 CD D9 07   TST8:   CALL GCHR       ;GET CHAR. OF NUMBER
    1788  0717 47                 MOV  B,A        ;SAVE A COPY
    1789  0718 E6 40              ANI  100Q       ;GET ABSOLUTE VALUE OF CHAR
    1790  071A 78                 MOV  A,B        ;INCASE PLUS
    1791  071B CA 21 07           JZ   GOTV       ;ALREADY PLUS
    1792  071E 3E 80              MVI  A,200Q     ;MAKE MINUS INTO PLUS
    1793  0720 90                 SUB  B          ;PLUS=200B-CHAR
    1794  0721 FE 12      GOTV:   CPI  22Q        ;TEST FOR USE OF 100000
    1795  0723 FA 2F 07           JM   TRY1       ;WONT GO
    1796  0726 CD DF 07           CALL MORD       ;WILL GO SO DO IT
    1797  0729 C6 05              ADI  5          ;INCREMENT DEC. EXPONENT BY 5
    1798  072B 77                 MOV  M,A        ;UPDATE MEM
    1799  072C C3 14 07           JMP  TST8       ;GO TRY AGAIN
    1800  072F 2E C3      TRY1:   MVI  L,LOW TEN  ;NOW USE JUST TEN
    1801  0731 CD 2D 08           CALL COPT       ;PUT IT IN RAM
    1802  0734 CD D9 07   TST1:   CALL GCHR       ;GET CHARACTERISTIC
    1803  0737 FE 01              CPI  1          ;MUST GET IN RANGE 1 TO 6
    1804  0739 F2 45 07           JP   OK1        ;ATLEAST ITS 1 OR BIGGER
    1805  073C CD DF 07   MDGN:   CALL MORD       ;MUST MUL OF DIV BY 10
    1806  073F C6 01              ADI  1          ;INCREMENT DECIMAL EXP.
    1807  0741 77                 MOV  M,A        ;UPDATE MEM
    1808  0742 C3 34 07           JMP  TST1       ;NOW TRY AGAIN
    1809  0745 FE 07      OK1:    CPI  7          ;TEST FOR LESS THAN 7
    1810  0747 F2 3C 07           JP   MDGN       ;NOPE - 7 OR GREATER
    1811  074A 69         MDSKP:  MOV  L,C        ;SET UP DIGIT COUNT
    1812  074B 2D                 DCR  L          
    1813  074C 2D                 DCR  L          ;IN 1ST WORD OF SCRATCH
    1814  074D 36 05              MVI  M,5        ;5 DIGITS
    1815  074F 5F                 MOV  E,A        ;SAVE CHAR. AS LEFT SHIFT COUNT
    1816  0750 CD B2 07           CALL LSFT       ;SHIFT LEFT PROPER NUMBER
    1817  0753 FE 0A              CPI  12Q        ;TEST FOR 2 DIGITS HERE
    1818  0755 F2 05 08           JP   TWOD       ;JMP IF 2 DIGITS TO OUTPUT
    1819  0758 CD 76 07           CALL DIGO       ;OUTPUT FIRST DIGIT
    1820  075B CD 8A 07   POPD:   CALL MULTT      ;MULTIPLY THE NUMBER BY 10
    1821  075E CD 76 07   INPOP:  CALL DIGO       ;PRINT DIGIT IN A
    1822  0761 C2 5B 07           JNZ  POPD       ;MORE DIGITS?
    1823  0764 3E C5              MVI  A,305Q     ;NO SO PRINT E
    1824  0766 CD F6 0F           CALL OUTR       ;BASIC CALL TO OUTPUT
    1825  0769 CD FA 07           CALL GETEX      ;GET DECIMAL EXP
    1826  076C 47                 MOV  B,A        ;SAVE A COPY
    1827  076D CD CC 07           CALL SIGN       ;OUTPUT SIGN
    1828  0770 78                 MOV  A,B        ;GET EXP BACK
    1829  0771 E6 3F              ANI  77Q        ;GET GOOD BITS
    1830  0773 CD 1C 08           CALL CTWO       ;GO CONVERT 2 DIGITS
    1831  0776 C6 B0      DIGO:   ADI  260Q       ;MAKE A INTO ASCII
    1832  0778 CD F6 0F           CALL OUTR       ;OUTPUT DIGIT
    1833  077B 69                 MOV  L,C        ;GET DIGIT COUNT
    1834  077C 2D                 DCR  L          ;BACK UP TO DIGIT COUNT
    1835  077D 2D                 DCR  L          
    1836  077E 7E                 MOV  A,M        ;TEST FOR DECIMAL PT
    1837  077F FE 05              CPI  5          ;PRINT . AFTER 1ST DIGIT
    1838  0781 3E AE              MVI  A,256Q     ;JUST IN CASE
    1839  0783 CC F6 0F           CZ   OUTR       ;OUTPUT . IF 1ST DIGIT
    1840  0786 56                 MOV  D,M        ;NOW DECREMENT DIGIT COUNT
    1841  0787 15                 DCR  D          
    1842  0788 72                 MOV  M,D        ;UPDATE MEM AND LEAVE FLOPS SET
    1843  0789 C9                 RET             ;SERVES AS TERM FOR DIGO & CVRT
    1844  078A 1E 01      MULTT:  MVI  E,1        ;MULT. BY 10 (START WITH X2)
    1845  078C CD B2 07           CALL LSFT       ;LEFT SHIFT 1 = X2
    1846  078F 69                 MOV  L,C        ;SAVE X2 IN "RESULT"
    1847  0790 2D                 DCR  L          ;SET TO TOP OF NUMBER
    1848  0791 79                 MOV  A,C        ;SET C TO RESULT
    1849  0792 C6 09              ADI  11Q        
    1850  0794 4F                 MOV  C,A        ;NOW C SET RIGHT
    1851  0795 7C                 MOV  A,H        ;SHOW RAM TO RAM TRANSFER
    1852  0796 CD 3B 08           CALL COPY       ;SAVE X2 FINALLY
    1853  0799 79                 MOV  A,C        ;MUST RESET C
    1854  079A D6 09              SUI  11Q        ;BACK TO NORMAL
    1855  079C 4F                 MOV  C,A        
    1856  079D 1E 02              MVI  E,2        ;NOW GET (X2)X4=X8
    1857  079F 69                 MOV  L,C        ;BUT MUST SAVE OVERFLOW
    1858  07A0 2D                 DCR  L          
    1859  07A1 CD B6 07           CALL TLP2       ;GET X8
    1860  07A4 69                 MOV  L,C        ;SET UP TO CALL DADD
    1861  07A5 79                 MOV  A,C        ;SET B TO X2
    1862  07A6 C6 0A              ADI  12Q        ;TO X2
    1863  07A8 47                 MOV  B,A        
    1864  07A9 CD 8B 04           CALL DADD       ;ADD TWO LOW WORDS
    1865  07AC 2D                 DCR  L          ;BACK UP TO OVERFLOW
    1866  07AD 7E                 MOV  A,M        ;GET IT
    1867  07AE 68                 MOV  L,B        ;NOW SET TO X2 OVERFLOW
    1868  07AF 2D                 DCR  L          ;ITS AT B-1
    1869  07B0 8E                 ADC  M          ;ADD WITH CARRY - CARRY WAS PRESERVED
    1870  07B1 C9                 RET             ;ALL DONE, RETURN OVERFLOW IN A
    1871  07B2 69         LSFT:   MOV  L,C        ;SET PTR FOR LEFT SHIFT OF NUMBER
    1872  07B3 2D                 DCR  L          ;BACK UP TO OVERFLOW
    1873  07B4 AF                 XRA  A          ;OVERFLOW=0 1ST TIME
    1874  07B5 77         TLOOP:  MOV  M,A        ;SAVE OVERFLOW
    1875  07B6 1D         TLP2:   DCR  E          ;TEST FOR DONE
    1876  07B7 F8                 RM              ;DONE WHEN E MINUS
    1877  07B8 2C                 INR  L          ;MOVE TO LOW
    1878  07B9 2C                 INR  L          
    1879  07BA 2C                 INR  L          ;/***TP EXTENSION
    1880  07BB 7E                 MOV  A,M        ;SHIFT LEFT 4 BYTES
    1881  07BC 17                 RAL             
    1882  07BD 77                 MOV  M,A        ;PUT BACK
    1883  07BE 2D                 DCR  L          ;/***TP - ALL DONE
    1884  07BF 7E                 MOV  A,M        ;GET LOW
    1885  07C0 17                 RAL             ;SHIFT LEFT 1
    1886  07C1 77                 MOV  M,A        ;RESTORE IT
    1887  07C2 2D                 DCR  L          ;BACK UP TO HIGH
    1888  07C3 7E                 MOV  A,M        ;GET HIGH
    1889  07C4 17                 RAL             ;SHIFT IT LEFT WITH CARRY
    1890  07C5 77                 MOV  M,A        ;PUT IT BACK
    1891  07C6 2D                 DCR  L          ;BACK UP TO OVERFLOW
    1892  07C7 7E                 MOV  A,M        ;GET OVERFLOW
    1893  07C8 17                 RAL             ;SHIFT IT LEFT
    1894  07C9 C3 B5 07           JMP  TLOOP      ;GO FOR MORE
    1895  07CC E6 80      SIGN:   ANI  200Q       ;GET SIGN BIT
    1896  07CE 3E A0              MVI  A,240Q     ;SPACE INSTEAD OF PLUS
    1897  07D0 CA D5 07           JZ   PLSV       ;TEST FOR +
    1898  07D3 3E AD              MVI  A,255Q     ;NEGATIVE
    1899  07D5 CD F6 0F   PLSV:   CALL OUTR       ;OUTPUT SIGN
    1900  07D8 C9                 RET             
    1901  07D9 69         GCHR:   MOV  L,C        ;GET CHARCTERISTIC
    1902  07DA 2C         GETA:   INR  L          ;MOVE TO IT
    1903  07DB 2C                 INR  L          
    1904  07DC 2C                 INR  L          ;/***TP
    1905  07DD 7E                 MOV  A,M        ;FETCH INTO A
    1906  07DE C9                 RET             ;DONE
    1907  07DF CD FA 07   MORD:   CALL GETEX      ;MUL OR DIV DEPENDING ON EXP
    1908  07E2 5F                 MOV  E,A        ;SAVE DECIMAL EXP
    1909  07E3 45                 MOV  B,L        ;SET UP TO MULT OR DIV
    1910  07E4 04                 INR  B          ;NOW BOP POINTER SET
    1911  07E5 69                 MOV  L,C        ;L POINTS TO NUMBER TO CONVERT
    1912  07E6 79                 MOV  A,C        ;POINT C AT "RESULT" AREA
    1913  07E7 C6 09              ADI  11Q        ;IN SCRATCH
    1914  07E9 4F                 MOV  C,A        ;NOW C SET RIGHT
    1915  07EA 7B                 MOV  A,E        ;NOW TEST FOR MUL
    1916  07EB E6 80              ANI  200Q       ;TEST NEGATIVE DEC. EXP.
    1917  07ED CA FF 07           JZ   DIVIT      ;IF EXP IS + THEN DIVIDE
    1918  07F0 CD E4 03           CALL LMUL       ;MULT.
    1919  07F3 79         FINUP:  MOV  A,C        ;SAVE LOC. OF RESULT
    1920  07F4 4D                 MOV  C,L        ;C=LOC OF NUMBER (IT WAS DESTROYED)
    1921  07F5 6F                 MOV  L,A        ;SET L TO LOC. OF RESUTL
    1922  07F6 7C                 MOV  A,H        ;SHOW RAM TO RAM TRANSFER
    1923  07F7 CD 3B 08           CALL COPY       ;MOVE RESULT TO NUMBER
    1924  07FA 69         GETEX:  MOV  L,C        ;NOW GET DECIMAL EXP
    1925  07FB 2C                 INR  L          
    1926  07FC C3 DA 07           JMP  GETA       ;USE PART OF GCHR
    1927  07FF CD 85 02   DIVIT:  CALL LDIV       ;DIVIDE
    1928  0802 C3 F3 07           JMP  FINUP      
    1929  0805 CD 1C 08   TWOD:   CALL CTWO       ;CONVERT TO 2 DIGITS
    1930  0808 47                 MOV  B,A        ;SAVE ONES DIGIT
    1931  0809 CD FA 07           CALL GETEX      ;GET DECIMAL EXP
    1932  080C 5F                 MOV  E,A        ;SAVE A COPY
    1933  080D E6 80              ANI  200Q       ;TEST FOR NEGATIVE
    1934  080F CA 18 08           JZ   ADD1       ;BUMP EXP BY 1 SINCE 2 DIGITS
    1935  0812 1D                 DCR  E          ;DECREMENT NEGATIVE EXP SINCE 2 DIGITS
    1936  0813 73         FINIT:  MOV  M,E        ;RESTORE EXP WITH NEW VALUE
    1937  0814 78                 MOV  A,B        ;NOW DO 2ND DIGIT
    1938  0815 C3 5E 07           JMP  INPOP      ;GO OUT 2ND AND REST FO DIGITS
    1939  0818 1C         ADD1:   INR  E          ;COMPENSATE FOR 2 DIGITS
    1940  0819 C3 13 08           JMP  FINIT      
    1941  081C 1E FF      CTWO:   MVI  E,377Q     ;CONVERT 2 DIGIT BIN TO BCD
    1942  081E 1C         LOOP:   INR  E          ;ADD UP TENS DIGIT
    1943  081F D6 0A              SUI  12Q        ;SUBTRACT 10
    1944  0821 F2 1E 08           JP   LOOP       ;TIIL NEGATIVE RESULT
    1945  0824 C6 0A              ADI  12Q        ;RESTORE ONES DIGIT
    1946  0826 47                 MOV  B,A        ;SAVE ONES DIGIT
    1947  0827 7B                 MOV  A,E        ;GET TENS DIGIT
    1948  0828 CD 76 07           CALL DIGO       ;OUTPUT IT
    1949  082B 78                 MOV  A,B        ;SET A TO 2ND DIGIT
    1950  082C C9                 RET             
    1951  082D 79         COPT:   MOV  A,C        ;COPY FROM 10N TO RAM
    1952  082E C6 05              ADI  5          
    1953  0830 4F                 MOV  C,A        ;SET C TO PLACE TO PUT
    1954  0831 3E 06              MVI  A,HIGH TEN5
    1955  0833 CD 3B 08           CALL COPY       ;COPY IT
    1956  0836 79                 MOV  A,C        ;NOW RESET C
    1957  0837 D6 05              SUI  5          
    1958  0839 4F                 MOV  C,A        ;ITS RESET
    1959  083A C9                 RET             
    1960  083B 44         COPY:   MOV  B,H        ;SAVE RAM H
    1961  083C 67                 MOV  H,A        ;SET TO SOURCE H
    1962  083D 7E                 MOV  A,M        ;GET 4 WORDS INTO THE REGS.
    1963  083E 2C                 INR  L          
    1964  083F 56                 MOV  D,M        
    1965  0840 2C                 INR  L          
    1966  0841 5E                 MOV  E,M        
    1967  0842 2C                 INR  L          
    1968  0843 6E                 MOV  L,M        ;LAST ONE ERASES L
    1969  0844 60                 MOV  H,B        ;SET TO DESTINATION RAM
    1970  0845 45                 MOV  B,L        ;SAVE 4TH WORD IN B
    1971  0846 69                 MOV  L,C        ;SET TO DESTINATION
    1972  0847 77                 MOV  M,A        ;SAVE FIRST WORD
    1973  0848 2C                 INR  L          
    1974  0849 7E                 MOV  A,M        ;SAVE THIS WORD IN A (INPUT SAVES C HERE)
    1975  084A 72                 MOV  M,D        ;NOW PUT 2ND WORD
    1976  084B 2C                 INR  L          
    1977  084C 73                 MOV  M,E        
    1978  084D 2C                 INR  L          
    1979  084E 70                 MOV  M,B        ;ALL 4  COPIED NOW
    1980  084F C9                 RET             ;ALL DONE
    1981                  ;
    1982                  ;
    1983                  ;
    1984                  ;       SCRATCH MAP FOR I/O CONVERSION ROUTINES
    1985                  ;
    1986                  ;       RELATIVE TO (C+2)USE
    1987                  ;       C-2             DIGIT COUNT
    1988                  ;       C-1             OVERFLOW
    1989                  ;       C               HIGH NUMBER - MANTISSA
    1990                  ;       C+1             LOW NUMBER
    1991                  ;       C+2             CHARACTERISTIC
    1992                  ;       C+3             DECIMAL EXPONEXT (SIGN & MAG.)
    1993                  ;       C+4             TEN**N
    1994                  ;       C+5             TEN**N
    1995                  ;       C+6             TEN**N
    1996                  ;       C+7             RESULT OF MULT & DIV
    1997                  ;       C+8             AND TEMP FOR X2
    1998                  ;       C+9             "       "
    1999                  ;       C+10            L FOR NUMBER TO GO INTO (INPUT ONLY)
    2000                  ;       C+11            DIGIT JUST INPUT (INPUT ONLY)
    2001                  ;
    2002                  ;
    2003                  ;                       /*****BEGIN INPUT*************
    2004                  ;
    2005                  ;
    2006                  
    2007                  ;*******************************************************
    2008                  ;       //// 4 1/2 DIGIT INPUT ROUTINE
    2009                  ;*******************************************************
    2010                  ;
    2011                  ; ON CALL /H POINTS TO SCRATCH PAGE
    2012                  ;         /L POINTS TO WHERE TO PUT INPUT NUMBER
    2013                  ;         /C POINTS TO SCRATCH AREA
    2014                  ;
    2015  0850 45         INPUT:  MOV  B,L        ;SAVE ADDRESS WHERE DATA IS TO GO
    2016  0851 79                 MOV  A,C        ;IN SCRATCH
    2017  0852 C6 0F              ADI  17Q        ;COMPUTE LOC. IN SCRATCH
    2018  0854 6F                 MOV  L,A        
    2019  0855 70                 MOV  M,B        ;PUT IT
    2020  0856 0C                 INR  C          ;OFFSET SCRATCH POINTER
    2021  0857 0C                 INR  C          ;BY 2
    2022  0858 CD 5E 09           CALL ZROIT      ;ZERO NUMBER
    2023  085B 2C                 INR  L          ;AND ZERO
    2024  085C 77                 MOV  M,A        ;DECIMAL EXPONENT
    2025  085D CD FB 08           CALL GNUM       ;GET INTEGER PART OF NUM
    2026  0860 FE FE              CPI  376Q       ;TERM=.?
    2027  0862 CA B5 08           JZ   DECPT      ;YES
    2028  0865 FE 15      TSTEX:  CPI  25Q        ;TEST FOR E
    2029  0867 CA CA 08           JZ   INEXP      ;YES - HANDLE EXP
    2030  086A FE F0              CPI  360Q       ;TEST FOR SPACE TERM (' '-'0')
    2031  086C C2 00 00           JNZ  ERRLN3     ;NOT LEGAL TERM
    2032  086F CD 44 09           CALL FLTSGN     ;FLOAT # AND SIGN IT
    2033  0872 CD FA 07   SCALE:  CALL GETEX      ;GET DECIMAL EXP
    2034  0875 E6 7F              ANI  177Q       ;GET GOOD BITS
    2035  0877 5F                 MOV  E,A        ;SAVE COPY
    2036  0878 E6 40              ANI  100Q       ;GET SIGN OF EXP
    2037  087A 07                 RLC             ;INTO SIGN BIT
    2038  087B B7                 ORA  A          ;SET FLOPS
    2039  087C 47                 MOV  B,A        ;SAVE SIGN
    2040  087D 7B                 MOV  A,E        ;GET EXP BACK
    2041  087E CA 84 08           JZ   APLS       ;JMP IS +
    2042  0881 3E 80              MVI  A,200Q     ;MAKE MINUS +
    2043  0883 93                 SUB  E          ;NOW ITS +
    2044  0884 80         APLS:   ADD  B          ;SIGN NUMBER
    2045  0885 77                 MOV  M,A        ;SAVE EXP (SIGN & MAG.)
    2046                  ;        MVI     L,(TEN5 AND 377Q)  ;TRY MORD WITH 10**5 FIRST
    2047  0886 2E B3              MVI  L,LOW TEN5 
    2048  0888 CD 2D 08           CALL COPT       ;TRANSFER TO RAM
    2049  088B CD FA 07           CALL GETEX      ;GET DECIMAL EXP
    2050  088E E6 3F      INT5:   ANI  77Q        ;GET MAG. OF EXP
    2051  0890 FE 05              CPI  5Q         ;TEST FOR USE OF 10**5
    2052  0892 FA 9E 08           JM   TRYTN      ;WONT GO - TRY 10
    2053  0895 CD DF 07           CALL MORD       ;WILL GO SO DO IT
    2054  0898 D6 05              SUI  5Q         ;MAG = MAG -5
    2055  089A 77                 MOV  M,A        ;UPDATE DEC. EXP IN MEM
    2056  089B C3 8E 08           JMP  INT5       ;GO TRY AGAIN
    2057                  ;TRYTN:  MVI     L,(TEN AND 377Q)  ;PUT TEN IN RAM
    2058  089E 2E C3      TRYTN:  MVI  L,LOW TEN  
    2059  08A0 CD 2D 08           CALL COPT       
    2060  08A3 CD FA 07           CALL GETEX      ;SET UP FOR LOOP
    2061  08A6 E6 3F      INT1:   ANI  77Q        ;GET MAGNITUDE
    2062  08A8 B7                 ORA  A          ;TEST FOR 0
    2063  08A9 CA 48 09           JZ   SAVEN      ;DONE, MOVE NUM OUT AND GET OUT
    2064  08AC CD DF 07           CALL MORD       ;NOT DONE - DO 10
    2065  08AF D6 01              SUI  1Q         ;EXP = EXP -1
    2066  08B1 77                 MOV  M,A        ;UPDATE MEM
    2067  08B2 C3 A6 08           JMP  INT1       ;TRY AGAIN
    2068  08B5 69         DECPT:  MOV  L,C        ;ZERO DIGIT COUNT
    2069  08B6 2D                 DCR  L          ;SINCE ITS NECESSARY
    2070  08B7 2D                 DCR  L          ;TO COMPUTE EXP.
    2071  08B8 36 00              MVI  M,0        ;ZEROED
    2072  08BA CD 3E 09           CALL EP1        ;GNUM IN MIDDLE
    2073  08BD 5F                 MOV  E,A        ;SAVE TERMINATOR
    2074  08BE 69                 MOV  L,C        ;MOVE DIGIT COUNT TO EXP
    2075  08BF 2D                 DCR  L          ;BACK UP TO DIGIT COUNT
    2076  08C0 2D                 DCR  L          
    2077  08C1 46                 MOV  B,M        ;GOT DIGIT COUNT
    2078  08C2 CD FA 07           CALL GETEX      ;SET L TO DEC. EXP
    2079  08C5 70                 MOV  M,B        ;PUT EXP
    2080  08C6 7B                 MOV  A,E        ;TERM BACK TO A
    2081  08C7 C3 65 08           JMP  TSTEX      ;TEST FOR E+OR-XX
    2082  08CA CD 44 09   INEXP:  CALL FLTSGN     ;FLOAT AND SIGN NUMBER
    2083  08CD CD 48 09           CALL SAVEN      ;SAVE NUMBER IN (L) TEMP
    2084  08D0 CD 5E 09           CALL ZROIT      ;ZERO OUT NUM. FOR INPUTTING EXP
    2085  08D3 CD FB 08           CALL GNUM       ;NOW INPUT EXPONENT
    2086  08D6 FE F0              CPI  360Q       ;TEST FOR SPACE TERM.
    2087  08D8 C2 00 00           JNZ  ERRLN3     ;NOT LEGAL - TRY AGAIN
    2088  08DB 69                 MOV  L,C        ;GET EXP OUT OF MEM
    2089  08DC 2C                 INR  L          ;/***TP
    2090  08DD 2C                 INR  L          ;EXP LIMITED TO 5 BITS
    2091  08DE 7E                 MOV  A,M        ;GET LOWEST 8 BITS
    2092  08DF E6 1F              ANI  37Q        ;GET GOOD BITS
    2093  08E1 47                 MOV  B,A        ;SAVE THEM
    2094  08E2 2C                 INR  L          ;GET SIGN OF EXP
    2095  08E3 7E                 MOV  A,M        ;INTO A
    2096  08E4 B7                 ORA  A          ;SET FLOPS
    2097  08E5 78                 MOV  A,B        ;INCASE NOTHING TO DO
    2098  08E6 FA EC 08           JM   USEIT      ;IF NEG. USE AS +
    2099  08E9 3E 00              MVI  A,0Q       ;IF + MAKE -
    2100  08EB 90                 SUB  B          ;0-X = -X
    2101  08EC 2C         USEIT:  INR  L          ;POINT AT EXP
    2102  08ED 86                 ADD  M          ;GET REAL DEC. EXP
    2103  08EE 77                 MOV  M,A        ;PUT IN MEM
    2104  08EF 79                 MOV  A,C        ;NOW GET NUMBER BACK
    2105  08F0 C6 0D              ADI  15Q        ;GET ADD OF L
    2106  08F2 6F                 MOV  L,A        ;L POINTS TO L OF NUMBER
    2107  08F3 6E                 MOV  L,M        ;NOW L POINTS TO NUMBER
    2108  08F4 7C                 MOV  A,H        ;RAM TO RAM COPY
    2109  08F5 CD 3B 08           CALL COPY       ;COPY IT BACK
    2110  08F8 C3 72 08           JMP  SCALE      ;NOW ADJUST FOR EXP
    2111                  
    2112  08FB CD A3 0E   GNUM:   CALL INP        ;GET A CHAR
    2113  08FE FE 20              CPI  040Q       ;IGNORE LEADING SPACES
    2114  0900 CA FB 08           JZ   GNUM       
    2115  0903 FE 2D              CPI  055Q       ;TEST FOR -
    2116  0905 C2 11 09           JNZ  TRYP       ;NOT MINUS
    2117  0908 69                 MOV  L,C        ;MINUS SO SET SIGN
    2118  0909 2C                 INR  L          ;IN CHAR LOC.
    2119  090A 2C                 INR  L          ;/***TP
    2120  090B 2C                 INR  L          
    2121  090C 36 80              MVI  M,200Q     ;SET - SIGN
    2122  090E C3 FB 08           JMP  GNUM       
    2123  0911 FE 2B      TRYP:   CPI  053Q       ;IGNORE +
    2124  0913 CA FB 08           JZ   GNUM       
    2125  0916 D6 30      TSTN:   SUI  060Q       ;STRIP ASCII
    2126  0918 F8                 RM              ;RETURN IF TERM
    2127  0919 FE 0A              CPI  12Q        ;TEST FOR NUMBER
    2128  091B F0                 RP              ;ILLEGAL
    2129  091C 5F                 MOV  E,A        ;SAVE DIGIT
    2130  091D CD 58 09           CALL GETN       ;LOC. OF DIGIT STORAGE TO L
    2131  0920 73                 MOV  M,E        ;SAVE DIGIT
    2132  0921 CD 8A 07           CALL MULTT      ;MULT NUMBER BY 10
    2133  0924 B7                 ORA  A          ;TEST FOR TOO MANY DIGITS
    2134  0925 C0                 RNZ             ;TOO MANY DIGITS
    2135  0926 CD 58 09           CALL GETN       ;GET DIGIT
    2136  0929 69                 MOV  L,C        ;SET L TO NUMBER
    2137  092A 2C                 INR  L          
    2138  092B 2C                 INR  L          ;/***TP
    2139  092C 86                 ADD  M          ;ADD IN THE DIGIT
    2140  092D 77                 MOV  M,A        ;PUT RESULT BACK
    2141  092E 2D                 DCR  L          ;NOW DO HIGH
    2142  092F 7E                 MOV  A,M        ;GET HIGH TO ADD IN CARRY
    2143  0930 CE 00              ACI  0Q         ;ADD IN CARRY
    2144  0932 77                 MOV  M,A        ;UPDATE HIGH
    2145  0933 2D                 DCR  L          ;/***TP EXTENSION
    2146  0934 7E                 MOV  A,M        
    2147  0935 CE 00              ACI  0Q         ;ADD IN CARRY
    2148  0937 77                 MOV  M,A        ;/***TP ALL DONE
    2149  0938 D8                 RC              ;OVERFLOW ERROR
    2150  0939 2D                 DCR  L          ;BUMP DIGIT COUNT NOW
    2151  093A 2D                 DCR  L          
    2152  093B 46                 MOV  B,M        ;GET DIGIT COUNT
    2153  093C 04                 INR  B          ;BUMP DIGIT COUNT
    2154  093D 70                 MOV  M,B        ;UPDATE DIGIT COUNT
    2155  093E CD A3 0E   EP1:    CALL INP        ;GET NEXT CHAR
    2156  0941 C3 16 09           JMP  TSTN       ;MUST BE NUM. OR TERM
    2157  0944 69         FLTSGN: MOV  L,C        ;POINT L AT NUMBER TO FLOAT
    2158  0945 C3 5A 04           JMP  FLOAT      ;GO FLOAT IT
    2159  0948 79         SAVEN:  MOV  A,C        ;PUT NUMBER IN (L)
    2160  0949 C6 0D              ADI  15Q        ;GET ADD OF L
    2161  094B 6F                 MOV  L,A        
    2162  094C 5E                 MOV  E,M        ;GET L OF RESULT
    2163  094D 6B                 MOV  L,E        ;POINT L AT (L)
    2164  094E 2C                 INR  L          ;SET TO 2ND WORD TO SAVE C
    2165  094F 71                 MOV  M,C        ;SAVE C IN (L) +1 SINCE IT WILL BE DESTROYED
    2166  0950 69                 MOV  L,C        ;SET UP TO CALL COPY
    2167  0951 4B                 MOV  C,E        ;NOW L&C SET
    2168  0952 7C                 MOV  A,H        ;RAM TO RAM COPY
    2169  0953 CD 3B 08           CALL COPY       ;COPY TO L
    2170  0956 4F                 MOV  C,A        ;(L)+1 RETURNED HERE SO SET AS C
    2171  0957 C9                 RET             
    2172  0958 79         GETN:   MOV  A,C        ;GET DIGIT
    2173  0959 C6 0E              ADI  16Q        ;LAST LOC. IN SCRATCH
    2174  095B 6F                 MOV  L,A        ;PUT IN L
    2175  095C 7E                 MOV  A,M        ;GET DIGIT
    2176  095D C9                 RET             
    2177  095E 69         ZROIT:  MOV  L,C        ;ZERO NUMBER
    2178  095F AF                 XRA  A          
    2179  0960 77                 MOV  M,A        ;/***TP
    2180  0961 2C                 INR  L          ;/***TP
    2181  0962 77                 MOV  M,A        
    2182  0963 2C                 INR  L          
    2183  0964 77                 MOV  M,A        
    2184  0965 2C                 INR  L          ;NOW SET SIGN TO +
    2185  0966 77                 MOV  M,A        
    2186  0967 C9                 RET             ;DONE
    2187                  
    2188                  
    2189                  ;**********************************************************************
    2190                  ;(FPOP2) Floating point cosine, COS(X) 
    2191                  ;Uses COS(X)=SIN(PI/2-X).  Returns FPRES
    2192  0968 21 C3 0C   DCOS:   LXI  H, SINC8   
    2193  096B 11 06 00           LXI  D, FPRES   
    2194  096E CD 4D 0F           CALL LCMPM      ;FPRES = PI/2
    2195  0971 21 0E 00           LXI  H, FPOP2   
    2196  0974 0E 0A              MVI  C, FPOP1   
    2197  0976 CD 68 0E           CALL DSINM      ;FPOP1 = X
    2198  0979 2E 06              MVI  L, FPRES   
    2199  097B 06 0A              MVI  B, FPOP1   
    2200  097D 0E 26              MVI  C, FPSCR   
    2201  097F CD E5 02           CALL LSUB       ;FPRES = PI/2 - X
    2202  0982 2E 06              MVI  L, FPRES   
    2203  0984 0E 0E              MVI  C, FPOP2   
    2204  0986 CD 68 0E           CALL DSINM      
    2205  0989 CD C7 0C           CALL DSIN       
    2206  098C C9                 RET             
    2207                  
    2208                  
    2209                  ;**********************************************************************
    2210                  ;(FPOP2) Floating point exponentiation, EXP(X) 
    2211                  ;Calculates e to the power of X.  Returns FPRES.
    2212  098D 80 00 00   DEXPC1: DB   80H, 0, 0, 1;CONSTANT 1.0
          0990 01      
    2213  0991 AD F8 51   DEXPC2: DB   0ADH, 0F8H, 51H, 02H;CONSTANT e = 2.7182818
          0994 02      
    2214  0995 AB 99 99   DEXPC3: DB   0ABH, 99H, 99H, 06H;CONSTANT 42.9
          0998 06      
    2215  0999 80 00 00   DEXPC4: DB   80H, 0, 0, 4;CONSTANT 8.0
          099C 04      
    2216  099D 80 00 00   DEXPC5: DB   80H, 0, 0, 81H;CONSTANT -1.0
          09A0 81      
    2217                  
    2218  09A1 21 0E 00   DEXP:   LXI  H, FPOP2   ;Copy X to FPOP5
    2219  09A4 0E 1A              MVI  C, FPOP5   
    2220  09A6 CD 68 0E           CALL DSINM      
    2221  09A9 97                 SUB  A          
    2222  09AA 32 3C 00           STA  EXPS       ;Init sign flag=0 (positive)
    2223  09AD 21 9D 09           LXI  H, DEXPC5  ;Copy -1.0 to FPOP3
    2224  09B0 11 12 00           LXI  D, FPOP3   
    2225  09B3 CD 4D 0F           CALL LCMPM      ;(HL, DE)
    2226  09B6 21 12 00           LXI  H, FPOP3   ;Is X <= -1.0?
    2227  09B9 06 0E              MVI  B, FPOP2   
    2228  09BB CD 0B 0F           CALL LCMP       ;(HL, B)
    2229  09BE DA D5 09           JC   DEXPP      ;  no
    2230  09C1 3E 01              MVI  A, 1       ;  yes, sign flag=1 (negative)
    2231  09C3 32 3C 00           STA  EXPS       
    2232  09C6 21 0E 00           LXI  H, FPOP2   ;X = ABS(X)
    2233  09C9 0E 1A              MVI  C, FPOP5   
    2234  09CB CD F6 0E           CALL LABS       
    2235  09CE 2E 1A              MVI  L, FPOP5   
    2236  09D0 0E 0E              MVI  C, FPOP2   
    2237  09D2 CD 68 0E           CALL DSINM      
    2238  09D5 21 95 09   DEXPP:  LXI  H, DEXPC3  ;Copy 42.9 to FPOP3
    2239  09D8 11 12 00           LXI  D, FPOP3   
    2240  09DB CD 4D 0F           CALL LCMPM      
    2241  09DE 21 0E 00           LXI  H, FPOP2   ;Is X < 42.9?
    2242  09E1 06 12              MVI  B, FPOP3   
    2243  09E3 CD 0B 0F           CALL LCMP       
    2244  09E6 D2 00 00           JNC  ERRLN7     ;  no, then Overflow Error
    2245  09E9 21 8D 09           LXI  H, DEXPC1  ;Copy 1.0 to FPOP3
    2246  09EC 11 12 00           LXI  D, FPOP3   
    2247  09EF CD 4D 0F           CALL LCMPM      
    2248  09F2 21 0E 00           LXI  H, FPOP2   ;Is X < 1.0?
    2249  09F5 06 12              MVI  B, FPOP3   
    2250  09F7 CD 0B 0F           CALL LCMP       
    2251  09FA D2 70 0A           JNC  DEXPB      ;  no, then jump to method B
    2252  09FD CD 01 0A           CALL DEXPA      ;  yes, then use method A
    2253  0A00 C9                 RET             
    2254                  
    2255                  ;Method A for X<1, use Taylor series
    2256  0A01 21 99 09   DEXPA:  LXI  H, DEXPC4  ;Copy 8. to FPOP3 (D)
    2257  0A04 11 12 00           LXI  D, FPOP3   
    2258  0A07 CD 4D 0F           CALL LCMPM      ;Move @HL-> @DE
    2259  0A0A 21 8D 09           LXI  H, DEXPC1  ;Copy 1. to FPOP4 (Answer)
    2260  0A0D 11 16 00           LXI  D, FPOP4   
    2261  0A10 CD 4D 0F           CALL LCMPM      
    2262  0A13 21 1A 00   DEXPA1: LXI  H, FPOP5   ;Copy X to FPOP1
    2263  0A16 0E 0A              MVI  C, FPOP1   
    2264  0A18 CD 68 0E           CALL DSINM      ;Move @HL-> @C (same page)
    2265  0A1B 2E 0A              MVI  L, FPOP1   ;FPRES = X/D
    2266  0A1D 06 12              MVI  B, FPOP3   
    2267  0A1F 0E 06              MVI  C, FPRES   
    2268  0A21 CD 85 02           CALL LDIV       ;(FPOP1 trashed)
    2269  0A24 2E 06              MVI  L, FPRES   ;Copy FPRES to FPOP1
    2270  0A26 0E 0A              MVI  C, FPOP1   
    2271  0A28 CD 68 0E           CALL DSINM      
    2272  0A2B 2E 0A              MVI  L, FPOP1   
    2273  0A2D 06 16              MVI  B, FPOP4   ;FPRES = X/D*Answer
    2274  0A2F 0E 06              MVI  C, FPRES   
    2275  0A31 CD E4 03           CALL LMUL       ;(FPOP1 trashed)
    2276  0A34 21 8D 09           LXI  H, DEXPC1  ;FPRES = X/D*Answer+1.
    2277  0A37 11 0A 00           LXI  D, FPOP1   
    2278  0A3A CD 4D 0F           CALL LCMPM      
    2279  0A3D 21 06 00           LXI  H, FPRES   
    2280  0A40 06 0A              MVI  B, FPOP1   
    2281  0A42 0E 26              MVI  C, FPSCR   
    2282  0A44 CD E1 02           CALL LADD       
    2283  0A47 2E 06              MVI  L, FPRES   ;FPOP4 (Answer) = FPRES
    2284  0A49 0E 16              MVI  C, FPOP4   
    2285  0A4B CD 68 0E           CALL DSINM      
    2286  0A4E 21 8D 09           LXI  H, DEXPC1  ;D = D -1.
    2287  0A51 11 0E 00           LXI  D, FPOP2   
    2288  0A54 CD 4D 0F           CALL LCMPM      
    2289  0A57 21 12 00           LXI  H, FPOP3   
    2290  0A5A 06 0E              MVI  B, FPOP2   
    2291  0A5C 0E 26              MVI  C, FPSCR   
    2292  0A5E CD E5 02           CALL LSUB       
    2293  0A61 3A 12 00           LDA  FPOP3      ;Is D = 0.?
    2294  0A64 B7                 ORA  A          
    2295  0A65 C2 13 0A           JNZ  DEXPA1     ;  no, then loop
    2296  0A68 2E 16              MVI  L, FPOP4   ;FPRES = FPOP4 (Answer)
    2297  0A6A 0E 06              MVI  C, FPRES   
    2298  0A6C CD 68 0E           CALL DSINM      
    2299  0A6F C9                 RET             
    2300                  
    2301                  ;Method B for X>=1
    2302  0A70 2E 1A      DEXPB:  MVI  L, FPOP5   ;Copy X to FPRES
    2303  0A72 0E 06              MVI  C, FPRES   
    2304  0A74 CD 68 0E           CALL DSINM      
    2305  0A77 21 06 00           LXI  H, FPRES   ;Ptr to X
    2306  0A7A CD 88 0F           CALL LINT       ;HL = INT(X)
    2307  0A7D 7D                 MOV  A, L       
    2308  0A7E 32 3B 00           STA  EXPI       ;EXPI = Low(INT(X))
    2309  0A81 01 0E 00           LXI  B, FPOP2   
    2310  0A84 CD 5E 0F           CALL LFLOAT     ;FPOP2=FLOAT(INT(X))
    2311  0A87 2E 1A              MVI  L, FPOP5   
    2312  0A89 06 0E              MVI  B, FPOP2   
    2313  0A8B 0E 26              MVI  C, FPSCR   
    2314  0A8D CD E5 02           CALL LSUB       ;X = X-FLOAT(INT(X))
    2315  0A90 CD 01 0A           CALL DEXPA      ;FPRES = EXP(X)
    2316  0A93 2E 06              MVI  L, FPRES   
    2317  0A95 0E 12              MVI  C, FPOP3   
    2318  0A97 CD 68 0E           CALL DSINM      ;Copy to FPOP3
    2319  0A9A 21 91 09           LXI  H, DEXPC2  
    2320  0A9D 11 0E 00           LXI  D, FPOP2   
    2321  0AA0 CD 4D 0F           CALL LCMPM      ;FPOP2 (Accumulator) = e
    2322  0AA3 3A 3B 00   DEXPB1: LDA  EXPI       ;Calc e^EXPI
    2323  0AA6 3D                 DCR  A          
    2324  0AA7 32 3B 00           STA  EXPI       
    2325  0AAA CA CA 0A           JZ   DEXPB2     
    2326  0AAD 21 91 09           LXI  H, DEXPC2  ;FPOP1 = e
    2327  0AB0 11 0A 00           LXI  D, FPOP1   
    2328  0AB3 CD 4D 0F           CALL LCMPM      
    2329  0AB6 21 0A 00           LXI  H, FPOP1   
    2330  0AB9 06 0E              MVI  B, FPOP2   
    2331  0ABB 0E 06              MVI  C, FPRES   
    2332  0ABD CD E4 03           CALL LMUL       ;FPRES = e * FPOP2
    2333  0AC0 2E 06              MVI  L, FPRES   
    2334  0AC2 0E 0E              MVI  C, FPOP2   
    2335  0AC4 CD 68 0E           CALL DSINM      
    2336  0AC7 C3 A3 0A           JMP  DEXPB1     
    2337  0ACA 21 0E 00   DEXPB2: LXI  H, FPOP2   ;Answer = FPOP3*e^EXPI
    2338  0ACD 06 12              MVI  B, FPOP3   
    2339  0ACF 0E 06              MVI  C, FPRES   
    2340  0AD1 CD E4 03           CALL LMUL       
    2341  0AD4 3A 3C 00           LDA  EXPS       ;Sign flag=0 (positive)?
    2342  0AD7 B7                 ORA  A          
    2343  0AD8 C8                 RZ              ;  yes, then done
    2344  0AD9 2E 06              MVI  L, FPRES   ;Copy FPRES to FPOP1
    2345  0ADB 0E 0A              MVI  C, FPOP1   
    2346  0ADD CD 68 0E           CALL DSINM      
    2347  0AE0 21 8D 09           LXI  H, DEXPC1  ;Move 1.0 to FPOP2
    2348  0AE3 11 0E 00           LXI  D, FPOP2   
    2349  0AE6 CD 4D 0F           CALL LCMPM      
    2350  0AE9 21 0E 00           LXI  H, FPOP2   ;FPRES = 1.0/FPRES
    2351  0AEC 06 0A              MVI  B, FPOP1   
    2352  0AEE 0E 06              MVI  C, FPRES   
    2353  0AF0 CD 85 02           CALL LDIV       
    2354  0AF3 C9                 RET             
    2355                  
    2356                  
    2357                  ;**********************************************************************
    2358                  ;(FPOP2) Floating natural logarithm, LOG(X),  Result in FPRES
    2359                  
    2360  0AF4 00 00 00   DLOGC0: DB   0, 0, 0, 40H;CONSTANT 0.0
          0AF7 40      
    2361  0AF8 80 00 00   DLOGC2: DB   80H, 0, 0, 2;CONSTANT 2.0
          0AFB 02      
    2362  0AFC CC CC CC   DLOGC3: DB   0CCH, 0CCH, 0CCH, 7EH;CONSTANT 0.2
          0AFF 7E      
    2363  0B00 E6 66 66   DLOGC4: DB   0E6H, 66H, 66H, 1;CONSTANT 1.8
          0B03 01      
    2364  0B04 86 37 BC   DLOGC5: DB   86H, 37H, 0BCH, 6DH;CONSTANT 0.000001
          0B07 6D      
    2365                  
    2366  0B08 21 F4 0A   DLOG:   LXI  H, DLOGC0  ;MOVE 0.0 TO FPOP1
    2367  0B0B 11 0A 00           LXI  D, FPOP1   
    2368  0B0E CD 4D 0F           CALL LCMPM      ;(HL, DE)
    2369  0B11 21 0A 00           LXI  H, FPOP1   ;IS X <=0.0?
    2370  0B14 06 0E              MVI  B, FPOP2   
    2371  0B16 CD 0B 0F           CALL LCMP       ;  (HL, B)
    2372  0B19 D2 00 00           JNC  ERRLN7     ;YES - OVERFLOW ERROR
    2373  0B1C 21 00 0B           LXI  H, DLOGC4  ;MOVE 1.8 TO FPOP1
    2374  0B1F 11 0A 00           LXI  D, FPOP1   
    2375  0B22 CD 4D 0F           CALL LCMPM      
    2376  0B25 21 FC 0A           LXI  H, DLOGC3  ;MOVE 0.2 TO FPOP3
    2377  0B28 11 12 00           LXI  D, FPOP3   
    2378  0B2B CD 4D 0F           CALL LCMPM      
    2379  0B2E 21 12 00           LXI  H, FPOP3   ;IS X <= 0.2?
    2380  0B31 06 0E              MVI  B, FPOP2   
    2381  0B33 CD 0B 0F           CALL LCMP       
    2382  0B36 D2 04 0C           JNC  DLOGB      ;  YES, THEN METHOD B
    2383  0B39 21 0A 00           LXI  H, FPOP1   ;IS X > 1.8?
    2384  0B3C 06 0E              MVI  B, FPOP2   
    2385  0B3E CD 0B 0F           CALL LCMP       
    2386  0B41 DA 04 0C           JC   DLOGB      ;  YES, THEN METHOD B
    2387                  ;METHOD A USES TAYLOR SERIES FOR .2 < X <= 1.8
    2388  0B44 21 9D 09   DLOGA:  LXI  H, DEXPC5  ;SIGN (FPOP5) = -1.0
    2389  0B47 11 1A 00           LXI  D, FPOP5   
    2390  0B4A CD 4D 0F           CALL LCMPM      
    2391  0B4D 21 F8 0A           LXI  H, DLOGC2  ;D (FPOP6) = 2.0
    2392  0B50 11 1E 00           LXI  D, FPOP6   
    2393  0B53 CD 4D 0F           CALL LCMPM      
    2394  0B56 21 8D 09           LXI  H, DEXPC1  ;MOVE 1.0 TO FPOP1
    2395  0B59 11 0A 00           LXI  D, FPOP1   
    2396  0B5C CD 4D 0F           CALL LCMPM      
    2397  0B5F 21 0E 00           LXI  H, FPOP2   ;Y (FPOP2) = X-1.0
    2398  0B62 06 0A              MVI  B, FPOP1   
    2399  0B64 0E 26              MVI  C, FPSCR   
    2400  0B66 CD E5 02           CALL LSUB       
    2401  0B69 0E 16              MVI  C, FPOP4   ;N (FPOP4) = Y
    2402  0B6B CD 68 0E           CALL DSINM      
    2403  0B6E 0E 12              MVI  C, FPOP3   ;SUM (FPOP3) = Y
    2404  0B70 CD 68 0E           CALL DSINM      
    2405  0B73 21 16 00   DLOGA1: LXI  H, FPOP4   ;N *= Y
    2406  0B76 0E 0A              MVI  C, FPOP1   
    2407  0B78 CD 68 0E           CALL DSINM      
    2408  0B7B 2E 0A              MVI  L, FPOP1   
    2409  0B7D 06 0E              MVI  B, FPOP2   
    2410  0B7F 0E 06              MVI  C, FPRES   
    2411  0B81 CD E4 03           CALL LMUL       
    2412  0B84 2E 06              MVI  L, FPRES   
    2413  0B86 0E 16              MVI  C, FPOP4   
    2414  0B88 CD 68 0E           CALL DSINM      
    2415  0B8B 2E 1A              MVI  L, FPOP5   ;T = SIGN*N/D
    2416  0B8D 0E 0A              MVI  C, FPOP1   
    2417  0B8F CD 68 0E           CALL DSINM      
    2418  0B92 2E 0A              MVI  L, FPOP1   
    2419  0B94 06 16              MVI  B, FPOP4   
    2420  0B96 0E 06              MVI  C, FPRES   
    2421  0B98 CD E4 03           CALL LMUL       
    2422  0B9B 2E 06              MVI  L, FPRES   
    2423  0B9D 06 1E              MVI  B, FPOP6   
    2424  0B9F 0E 22              MVI  C, FPOP7   
    2425  0BA1 CD 85 02           CALL LDIV       
    2426  0BA4 2E 22              MVI  L, FPOP7   ;SUM += T
    2427  0BA6 0E 0A              MVI  C, FPOP1   
    2428  0BA8 CD 68 0E           CALL DSINM      
    2429  0BAB 2E 12              MVI  L, FPOP3   
    2430  0BAD 06 0A              MVI  B, FPOP1   
    2431  0BAF 0E 26              MVI  C, FPSCR   
    2432  0BB1 CD E1 02           CALL LADD       
    2433  0BB4 21 8D 09           LXI  H, DEXPC1  ;D += 1.
    2434  0BB7 11 0A 00           LXI  D, FPOP1   
    2435  0BBA CD 4D 0F           CALL LCMPM      
    2436  0BBD 21 1E 00           LXI  H, FPOP6   
    2437  0BC0 06 0A              MVI  B, FPOP1   
    2438  0BC2 0E 26              MVI  C, FPSCR   
    2439  0BC4 CD E1 02           CALL LADD       
    2440  0BC7 21 9D 09           LXI  H, DEXPC5  ;SIGN *= -1.
    2441  0BCA 11 0A 00           LXI  D, FPOP1   
    2442  0BCD CD 4D 0F           CALL LCMPM      
    2443  0BD0 21 0A 00           LXI  H, FPOP1   
    2444  0BD3 06 1A              MVI  B, FPOP5   
    2445  0BD5 0E 06              MVI  C, FPRES   
    2446  0BD7 CD E4 03           CALL LMUL       
    2447  0BDA 2E 06              MVI  L, FPRES   
    2448  0BDC 0E 1A              MVI  C, FPOP5   
    2449  0BDE CD 68 0E           CALL DSINM      
    2450  0BE1 2E 22              MVI  L, FPOP7   ;FPOP1 = ABS(T)
    2451  0BE3 0E 0A              MVI  C, FPOP1   
    2452  0BE5 CD F6 0E           CALL LABS       
    2453  0BE8 21 04 0B           LXI  H, DLOGC5  ;IS FPOP1 > 0.000001?
    2454  0BEB 11 06 00           LXI  D, FPRES   
    2455  0BEE CD 4D 0F           CALL LCMPM      
    2456  0BF1 21 0A 00           LXI  H, FPOP1   
    2457  0BF4 06 06              MVI  B, FPRES   
    2458  0BF6 CD 0B 0F           CALL LCMP       
    2459  0BF9 D2 73 0B           JNC  DLOGA1     
    2460  0BFC 2E 12              MVI  L, FPOP3   ;FPRES = SUM
    2461  0BFE 0E 06              MVI  C, FPRES   
    2462  0C00 CD 68 0E           CALL DSINM      
    2463  0C03 C9                 RET             ;EXIT
    2464                  ;METHOD B USES SQRT TO REDUCE X TO RANGE 0.2 TO 1.8
    2465                  ;THE NUMBER, N, OF ROOTS, THEN 2^N * LOG(X) 
    2466  0C04 97         DLOGB:  SUB  A          ;INIT COUNT OF SQRTs
    2467  0C05 32 3A 00           STA  FPCNT      ;FPCNT = 0
    2468  0C08 21 0E 00   DLOGB1: LXI  H, FPOP2   ;X = SQRT(X)
    2469  0C0B 06 06              MVI  B, FPRES   
    2470  0C0D 0E 26              MVI  C, FPSCR   
    2471  0C0F CD 1F 06           CALL DSQRT      
    2472  0C12 2E 06              MVI  L, FPRES   
    2473  0C14 0E 0E              MVI  C, FPOP2   
    2474  0C16 CD 68 0E           CALL DSINM      
    2475  0C19 3A 3A 00           LDA  FPCNT      ;COUNT += 1
    2476  0C1C 3C                 INR  A          
    2477  0C1D 32 3A 00           STA  FPCNT      
    2478  0C20 2E 0A              MVI  L, FPOP1   ;IS X > 1.8?
    2479  0C22 06 0E              MVI  B, FPOP2   
    2480  0C24 CD 0B 0F           CALL LCMP       
    2481  0C27 DA 08 0C           JC   DLOGB1     
    2482  0C2A 2E 12              MVI  L, FPOP3   ;IS X < 0.2?
    2483  0C2C CD 0B 0F           CALL LCMP       
    2484  0C2F D2 08 0C           JNC  DLOGB1     
    2485  0C32 CD 44 0B           CALL DLOGA      ;FPOP2 = LOG(X)
    2486  0C35 2E 06              MVI  L, FPRES   
    2487  0C37 0E 0E              MVI  C, FPOP2   
    2488  0C39 CD 68 0E           CALL DSINM      
    2489  0C3C 3A 3A 00           LDA  FPCNT      ;A = 2^COUNT
    2490  0C3F 4F                 MOV  C, A       
    2491  0C40 3E 01              MVI  A, 1       
    2492  0C42 07         DLOGB2: RLC             
    2493  0C43 0D                 DCR  C          
    2494  0C44 C2 42 0C           JNZ  DLOGB2     
    2495  0C47 6F                 MOV  L, A       ;FPOP4 = FLOAT(HL)
    2496  0C48 26 00              MVI  H, 0       
    2497  0C4A 01 16 00           LXI  B, FPOP4   
    2498  0C4D CD 5E 0F           CALL LFLOAT     
    2499  0C50 21 0E 00           LXI  H, FPOP2   ;FPRES = FPOP2*FPOP4
    2500  0C53 06 16              MVI  B, FPOP4   
    2501  0C55 0E 06              MVI  C, FPRES   
    2502  0C57 CD E4 03           CALL LMUL       
    2503  0C5A C9                 RET             
    2504                  
    2505                  
    2506                  ;**********************************************************************
    2507                  ;(FPOP1, FPOP2) Floating Exponentiation FPOP1^FPOPY, POW(X, Y) 
    2508                  ;Result in FPRES.
    2509  0C5B 21 F8 0A   DPOW:   LXI  H, DLOGC2  ;MOVE 2.0 TO FPRES
    2510  0C5E 11 06 00           LXI  D, FPRES   
    2511  0C61 CD 4D 0F           CALL LCMPM      
    2512  0C64 21 06 00           LXI  H, FPRES   ;IS Y = 2.0?
    2513  0C67 06 0E              MVI  B, FPOP2   
    2514  0C69 CD 0B 0F           CALL LCMP       
    2515  0C6C C2 7E 0C           JNZ  DPOW2      ;  no, then jump
    2516                  ;For Y=2.0 ANSWER = X*X
    2517  0C6F 2E 0A              MVI  L, FPOP1   
    2518  0C71 0E 0E              MVI  C, FPOP2   
    2519  0C73 CD 68 0E           CALL DSINM      
    2520  0C76 06 0E              MVI  B, FPOP2   
    2521  0C78 0E 06              MVI  C, FPRES   
    2522  0C7A CD E4 03           CALL LMUL       
    2523  0C7D C9                 RET             
    2524                  ;ANSWER = EXP(Y*LOG(X))
    2525  0C7E 2A 0E 00   DPOW2:  LHLD FPOP2      ;SAVE Y ON STACK
    2526  0C81 E5                 PUSH H          
    2527  0C82 2A 10 00           LHLD FPOP2+2    
    2528  0C85 E5                 PUSH H          
    2529  0C86 21 0A 00           LXI  H, FPOP1   ;MOVE X TO FPOP2
    2530  0C89 0E 0E              MVI  C, FPOP2   
    2531  0C8B CD 68 0E           CALL DSINM      
    2532  0C8E CD 08 0B           CALL DLOG       ;FPRES = LOG(X)
    2533  0C91 E1                 POP  H          
    2534  0C92 22 0C 00           SHLD FPOP1+2    
    2535  0C95 E1                 POP  H          
    2536  0C96 22 0A 00           SHLD FPOP1      
    2537  0C99 21 06 00           LXI  H, FPRES   ;FPOP2 = LOG(X)*Y
    2538  0C9C 06 0A              MVI  B, FPOP1   
    2539  0C9E 0E 0E              MVI  C, FPOP2   
    2540  0CA0 CD E4 03           CALL LMUL       
    2541  0CA3 CD A1 09           CALL DEXP       ;FPRES = EXP(LOG(X)*Y)
    2542  0CA6 C9                 RET             
    2543                  
    2544                  
    2545                  ;**********************************************************************
    2546                  ;(FPOP2) Floating sine, SIN(X).  Returns FPRES 
    2547                  ;Uses telescoped series:  SINC4*X - SINC3*X^3 + SINC2*X^5 - SINC1*X^7
    2548  0CA7 8D 95 2B   SINC1:  DB   08DH, 095H, 02BH, 079H;0.0043207614
          0CAA 79      
    2549  0CAB A2 A7 EF   SINC2:  DB   0A2H, 0A7H, 0EFH, 07DH;0.079421881
          0CAE 7D      
    2550  0CAF A5 58 F7   SINC3:  DB   0A5H, 058H, 0F7H, 000H;0.64588889
          0CB2 00      
    2551  0CB3 C9 0F A9   SINC4:  DB   0C9H, 00FH, 0A9H, 001H;1.5707907
          0CB6 01      
    2552  0CB7 A2 F9 81   SINC5:  DB   0A2H, 0F9H, 081H, 000H;0.63661977 (2/PI)
          0CBA 00      
    2553  0CBB 96 CB E2   SINC6:  DB   096H, 0CBH, 0E2H, 003H;4.7123890 (3/2*PI)
          0CBE 03      
    2554  0CBF C9 0F D8   SINC7:  DB   0C9H, 00FH, 0D8H, 003H;6.2831853 (2*PI)
          0CC2 03      
    2555  0CC3 C9 0F D8   SINC8:  DB   0C9H, 00FH, 0D8H, 001H;1.5707963 (PI/2)
          0CC6 01      
    2556                  
    2557  0CC7 CD 49 0D   DSIN:   CALL DANG       ;ANGLE TO 0<=X<=PI/2 & SIGN
    2558  0CCA 21 B7 0C           LXI  H, SINC5   ;MULTIPLY X * SINC5
    2559  0CCD 11 0A 00           LXI  D, FPOP1   
    2560  0CD0 CD 4D 0F           CALL LCMPM      
    2561  0CD3 21 0A 00           LXI  H, FPOP1   
    2562  0CD6 06 0E              MVI  B, FPOP2   
    2563  0CD8 0E 06              MVI  C, FPRES   
    2564  0CDA CD E4 03           CALL LMUL       
    2565  0CDD 2E 06              MVI  L, FPRES   
    2566  0CDF 0E 0E              MVI  C, FPOP2   
    2567  0CE1 CD 68 0E           CALL DSINM      
    2568  0CE4 21 A7 0C           LXI  H, SINC1   ;RESULT = SINC1
    2569  0CE7 11 0A 00           LXI  D, FPOP1   
    2570  0CEA CD 4D 0F           CALL LCMPM      
    2571  0CED 26 00              MVI  H, HIGH FPOP1
    2572  0CEF CD 1E 0D           CALL DSINXX     ;MULTIPLY RESULT *X *X
    2573  0CF2 21 AB 0C           LXI  H, SINC2   ;SUBTRACT SINC2 - RESULT
    2574  0CF5 CD 38 0D           CALL DSINS      
    2575  0CF8 CD 1E 0D           CALL DSINXX     ;MULTIPLY RESULT *X *X
    2576  0CFB 21 AF 0C           LXI  H, SINC3   ;SUBTRACT SINC3 - RESULT
    2577  0CFE CD 38 0D           CALL DSINS      
    2578  0D01 CD 1E 0D           CALL DSINXX     ;MULTIPLY RESULT *X *X
    2579  0D04 21 B3 0C           LXI  H, SINC4   ;SUBTRACT SINC4 - RESULT
    2580  0D07 CD 38 0D           CALL DSINS      
    2581  0D0A 0E 06              MVI  C, FPRES   ;MULTIPLY X * RESULT
    2582  0D0C 2E 0A              MVI  L, FPOP1   
    2583  0D0E 06 0E              MVI  B, FPOP2   
    2584  0D10 CD E4 03           CALL LMUL       
    2585  0D13 3A 3D 00           LDA  LSIGN      ;SIGN RESULT
    2586  0D16 4F                 MOV  C, A       
    2587  0D17 21 09 00           LXI  H, FPRES+3 
    2588  0D1A 7E                 MOV  A, M       
    2589  0D1B B1                 ORA  C          
    2590  0D1C 77                 MOV  M, A       
    2591  0D1D C9                 RET             
    2592  0D1E 2E 0A      DSINXX: MVI  L, FPOP1   ;MULTIPLY FPOP1 * X * X
    2593  0D20 06 0E              MVI  B, FPOP2   
    2594  0D22 0E 06              MVI  C, FPRES   
    2595  0D24 CD E4 03           CALL LMUL       
    2596  0D27 2E 06              MVI  L, FPRES   
    2597  0D29 0E 0A              MVI  C, FPOP1   
    2598  0D2B CD 68 0E           CALL DSINM      
    2599  0D2E 2E 0A              MVI  L, FPOP1   
    2600  0D30 06 0E              MVI  B, FPOP2   
    2601  0D32 0E 06              MVI  C, FPRES   
    2602  0D34 CD E4 03           CALL LMUL       
    2603  0D37 C9                 RET             
    2604  0D38 11 0A 00   DSINS:  LXI  D, FPOP1   ;SUBTRACT TWO FLOATS
    2605  0D3B CD 4D 0F           CALL LCMPM      
    2606  0D3E 21 0A 00           LXI  H, FPOP1   
    2607  0D41 06 06              MVI  B, FPRES   
    2608  0D43 0E 26              MVI  C, FPSCR   
    2609  0D45 CD E5 02           CALL LSUB       
    2610  0D48 C9                 RET             
    2611                  
    2612                  ;CONVERT FPOP2 ANGLE TO RANGE 0<=X<=PI/2 + LSIGN
    2613  0D49 21 11 00   DANG:   LXI  H, FPOP2+3 
    2614  0D4C 7E                 MOV  A, M       ;LSIGN = SIGN OF ANGLE
    2615  0D4D E6 80              ANI  80H        
    2616  0D4F 32 3D 00           STA  LSIGN      
    2617  0D52 7E                 MOV  A, M       ;ANGLE = ABS(ANGLE)
    2618  0D53 E6 7F              ANI  7FH        
    2619  0D55 77                 MOV  M, A       
    2620  0D56 21 BF 0C           LXI  H, SINC7   ;IS ANGLE > 2*PI?
    2621  0D59 11 0A 00           LXI  D, FPOP1   
    2622  0D5C CD 4D 0F           CALL LCMPM      ;  FPOP1 = 2*PI
    2623  0D5F 21 0A 00           LXI  H, FPOP1   
    2624  0D62 06 0E              MVI  B, FPOP2   
    2625  0D64 CD 0B 0F           CALL LCMP       ;  Compare
    2626  0D67 D2 9C 0D           JNC  DANG1      
    2627                  ;Reduce angle till < 2*PI
    2628  0D6A 21 0E 00           LXI  H, FPOP2   ;FPOP3 = COPY OF ANGLE
    2629  0D6D 0E 12              MVI  C, FPOP3   
    2630  0D6F CD 68 0E           CALL DSINM      
    2631  0D72 21 12 00           LXI  H, FPOP3   
    2632  0D75 06 0A              MVI  B, FPOP1   ;(FPOP1 = 2*PI)
    2633  0D77 0E 06              MVI  C, FPRES   
    2634  0D79 CD 85 02           CALL LDIV       ;FPRES = ANGLE/(2*PI)
    2635  0D7C 21 06 00           LXI  H, FPRES   ;FPOP3 = INT(FPRES)
    2636  0D7F CD 88 0F           CALL LINT       
    2637  0D82 01 12 00           LXI  B, FPOP3   
    2638  0D85 CD 5E 0F           CALL LFLOAT     
    2639  0D88 21 12 00           LXI  H, FPOP3   ;FPRES = FPOP3 * 2*PI
    2640  0D8B 06 0A              MVI  B, FPOP1   
    2641  0D8D 0E 06              MVI  C, FPRES   
    2642  0D8F CD E4 03           CALL LMUL       
    2643  0D92 21 0E 00           LXI  H, FPOP2   ;ANGLE = ANGLE - FPRES
    2644  0D95 06 06              MVI  B, FPRES   
    2645  0D97 0E 26              MVI  C, FPSCR   
    2646  0D99 CD E5 02           CALL LSUB       
    2647                  
    2648  0D9C 21 C3 0C   DANG1:  LXI  H, SINC8   ;IS ANGLE < PI/2? (1st quadrant)
    2649  0D9F 11 06 00           LXI  D, FPRES   
    2650  0DA2 CD 4D 0F           CALL LCMPM      ;  FPRES = 2*PI
    2651  0DA5 21 0E 00           LXI  H, FPOP2   
    2652  0DA8 0E 0A              MVI  C, FPOP1   
    2653  0DAA CD 68 0E           CALL DSINM      ;  FPOP1 = ANGLE
    2654  0DAD 21 06 00           LXI  H, FPRES   
    2655  0DB0 06 0A              MVI  B, FPOP1   
    2656  0DB2 0E 26              MVI  C, FPSCR   
    2657  0DB4 CD E5 02           CALL LSUB       ;  FPRES = PI/2 - ANGLE
    2658  0DB7 3A 09 00           LDA  FPRES+3    
    2659  0DBA E6 80              ANI  80H        ;  positive?
    2660  0DBC C8                 RZ              ;  yes, then done.
    2661                  
    2662  0DBD 21 BF 0C   DANG2:  LXI  H, SINC7   ;ELSE IS ANGLE < PI? (2nd quadrant)
    2663  0DC0 11 06 00           LXI  D, FPRES   ;  FPRES = 2*PI
    2664  0DC3 CD 4D 0F           CALL LCMPM      
    2665  0DC6 3E 02              MVI  A, 2       
    2666  0DC8 32 09 00           STA  FPRES+3    ;  FPRES = PI
    2667  0DCB 21 0E 00           LXI  H, FPOP2   
    2668  0DCE 0E 0A              MVI  C, FPOP1   
    2669  0DD0 CD 68 0E           CALL DSINM      ;  FPOP1 = ANGLE
    2670  0DD3 21 06 00           LXI  H, FPRES   
    2671  0DD6 06 0A              MVI  B, FPOP1   
    2672  0DD8 0E 26              MVI  C, FPSCR   
    2673  0DDA CD E5 02           CALL LSUB       ;  FPRES = PI - ANGLE
    2674  0DDD 3A 09 00           LDA  FPRES+3    
    2675  0DE0 E6 80              ANI  80H        ;  negative?
    2676  0DE2 C2 EE 0D           JNZ  DANG3      ;  yes, then jump
    2677  0DE5 21 06 00           LXI  H, FPRES   ;ANGLE = PI - ANGLE
    2678  0DE8 0E 0E              MVI  C, FPOP2   
    2679  0DEA CD 68 0E           CALL DSINM      
    2680  0DED C9                 RET             
    2681                  
    2682  0DEE 21 BB 0C   DANG3:  LXI  H, SINC6   ;ELSE IS ANGLE < 3*PI/2? (3rd quadrant)
    2683  0DF1 11 06 00           LXI  D, FPRES   
    2684  0DF4 CD 4D 0F           CALL LCMPM      ;  FPRES = 3*PI/2
    2685  0DF7 21 0E 00           LXI  H, FPOP2   
    2686  0DFA 0E 0A              MVI  C, FPOP1   
    2687  0DFC CD 68 0E           CALL DSINM      ;  FPOP1 = ANGLE
    2688  0DFF 21 0A 00           LXI  H, FPOP1   
    2689  0E02 06 06              MVI  B, FPRES   
    2690  0E04 0E 26              MVI  C, FPSCR   
    2691  0E06 CD E5 02           CALL LSUB       ;  FPOP1 = ANGLE - 3*PI/2
    2692  0E09 3A 0D 00           LDA  FPOP1+3    
    2693  0E0C E6 80              ANI  80H        ;  positive?
    2694  0E0E CA 3C 0E           JZ   DANG4      ;  yes, then jump
    2695  0E11 21 BF 0C           LXI  H, SINC7   ;ANGLE = ABS(ANGLE - 3*PI/2)
    2696  0E14 11 06 00           LXI  D, FPRES   
    2697  0E17 CD 4D 0F           CALL LCMPM      ;  FPRES = 2*PI
    2698  0E1A 3E 02              MVI  A, 2       
    2699  0E1C 32 09 00           STA  FPRES+3    ;  FPRES = PI
    2700  0E1F 21 0E 00           LXI  H, FPOP2   
    2701  0E22 0E 0A              MVI  C, FPOP1   
    2702  0E24 CD 68 0E           CALL DSINM      ;  FPOP1 = ANGLE
    2703  0E27 21 06 00           LXI  H, FPRES   
    2704  0E2A 06 0A              MVI  B, FPOP1   
    2705  0E2C 0E 26              MVI  C, FPSCR   
    2706  0E2E CD E5 02           CALL LSUB       ;  FPRES = PI/2 - ANGLE
    2707  0E31 21 06 00           LXI  H, FPRES   
    2708  0E34 0E 0E              MVI  C, FPOP2   
    2709  0E36 CD F6 0E           CALL LABS       ;  FPOP2 = ABS(FPRES)
    2710  0E39 C3 5F 0E           JMP  DANGS      
    2711                  
    2712  0E3C 21 BF 0C   DANG4:  LXI  H, SINC7   ;ELSE ANGLE = 2*PI - ANGLE (4th quadrant)
    2713  0E3F 11 06 00           LXI  D, FPRES   
    2714  0E42 CD 4D 0F           CALL LCMPM      ;  FPRES = 2*PI
    2715  0E45 21 0E 00           LXI  H, FPOP2   
    2716  0E48 0E 0A              MVI  C, FPOP1   
    2717  0E4A CD 68 0E           CALL DSINM      ;  FPOP1 = ANGLE
    2718  0E4D 21 06 00           LXI  H, FPRES   
    2719  0E50 06 0A              MVI  B, FPOP1   
    2720  0E52 0E 26              MVI  C, FPSCR   
    2721  0E54 CD E5 02           CALL LSUB       ;  FPRES = PI - ANGLE
    2722  0E57 21 06 00           LXI  H, FPRES   
    2723  0E5A 0E 0E              MVI  C, FPOP2   
    2724  0E5C CD 68 0E           CALL DSINM      
    2725  0E5F 3A 3D 00   DANGS:  LDA  LSIGN      ;SIGN = -SIGN
    2726  0E62 EE 80              XRI  80H        
    2727  0E64 32 3D 00           STA  LSIGN      
    2728  0E67 C9                 RET             
    2729                  
    2730                  ; Move a copy of float (4 bytes) from @HL to @C in same page
    2731  0E68 E5         DSINM:  PUSH H          
    2732  0E69 44                 MOV  B, H       
    2733  0E6A 16 04              MVI  D, 4       
    2734  0E6C 7E         DSINML: MOV  A, M       
    2735  0E6D 02                 STAX B          
    2736  0E6E 2C                 INR  L          
    2737  0E6F 0C                 INR  C          
    2738  0E70 15                 DCR  D          
    2739  0E71 C2 6C 0E           JNZ  DSINML     
    2740  0E74 E1                 POP  H          
    2741  0E75 C9                 RET             
    2742                  
    2743                  
    2744                  ;**********************************************************************
    2745                  ;(FPOP2) Floating tangent, TAN(X).  Returns FPRES 
    2746                  ;Calculates using TAN(X)=SIN(X)/COS(X)
    2747  0E76 21 0E 00   DTAN:   LXI  H, FPOP2   ;Copy X to FPOP3
    2748  0E79 0E 12              MVI  C, FPOP3   
    2749  0E7B CD 68 0E           CALL DSINM      
    2750  0E7E CD C7 0C           CALL DSIN       ;FPRES = SIN(X)
    2751  0E81 2E 06              MVI  L, FPRES   ;Copy SINX(X) to FPOP4
    2752  0E83 0E 16              MVI  C, FPOP4   
    2753  0E85 CD 68 0E           CALL DSINM      
    2754  0E88 2E 12              MVI  L, FPOP3   ;Copy X to FPOP2
    2755  0E8A 0E 0E              MVI  C, FPOP2   
    2756  0E8C CD 68 0E           CALL DSINM      
    2757  0E8F CD 68 09           CALL DCOS       ;FPRES = COX(X)
    2758  0E92 2E 06              MVI  L, FPRES   ;Copy COS(X) to FPOP2
    2759  0E94 0E 0E              MVI  C, FPOP2   
    2760  0E96 CD 68 0E           CALL DSINM      
    2761  0E99 2E 16              MVI  L, FPOP4   
    2762  0E9B 06 0E              MVI  B, FPOP2   
    2763  0E9D 0E 06              MVI  C, FPRES   
    2764  0E9F CD 85 02           CALL LDIV       ;FPRES = SINX(X)/COS(X)
    2765  0EA2 C9                 RET             
    2766                  
    2767                  
    2768                  ;**********************************************************************
    2769                  ;Get an ASCII float number.  INPUT expects a ' ' to terminate the string.
    2770                  ;If an invalid float char is detected, return ' '. Uses FPPR, FPFLG
    2771  0EA3 E5         INP:    PUSH H          
    2772  0EA4 2A 37 00           LHLD FPPTR      ;HL=POINTER TO INPUT STREAM
    2773  0EA7 3A 39 00           LDA  FPFLG      ;GET PROGRESS FLAG
    2774  0EAA B7                 ORA  A          ;FLAG=0?
    2775  0EAB C2 B5 0E           JNZ  INP1       ;  YES, THEN CHAR ACCEPTED
    2776  0EAE 3C                 INR  A          ;SET FLAG=1
    2777  0EAF 32 39 00           STA  FPFLG      
    2778  0EB2 C3 EF 0E           JMP  INPOK      
    2779  0EB5 7E         INP1:   MOV  A, M       ;GET NEXT CHAR
    2780  0EB6 FE 45              CPI  'E'        ;'E'?
    2781  0EB8 C2 C3 0E           JNZ  INP2       
    2782  0EBB 3E 02              MVI  A, 2       ;SET FLAG=2
    2783  0EBD 32 39 00           STA  FPFLG      
    2784  0EC0 C3 EF 0E           JMP  INPOK      
    2785  0EC3 3A 39 00   INP2:   LDA  FPFLG      
    2786  0EC6 FE 02              CPI  2          ;FLAG=2?
    2787  0EC8 C2 DE 0E           JNZ  INP4       
    2788  0ECB 7E                 MOV  A, M       ;GET NEXT CHAR
    2789  0ECC FE 2B              CPI  '+'        
    2790  0ECE CA D6 0E           JZ   INP3       
    2791  0ED1 FE 2D              CPI  '-'        
    2792  0ED3 C2 DE 0E           JNZ  INP4       
    2793  0ED6 3E 03      INP3:   MVI  A, 3       ;SET FLAG=3
    2794  0ED8 32 39 00           STA  FPFLG      
    2795  0EDB C3 EF 0E           JMP  INPOK      
    2796  0EDE 7E         INP4:   MOV  A, M       ;GET NEXT CHAR
    2797  0EDF CD 7E 02           CALL IS09       ;0-9?
    2798  0EE2 D2 EF 0E           JNC  INPOK      
    2799  0EE5 FE 2E              CPI  '.'        
    2800  0EE7 CA EF 0E           JZ   INPOK      
    2801  0EEA 3E 20              MVI  A, ' '     ;INVALID CHAR, REPLACE WITH ' '
    2802  0EEC C3 F4 0E           JMP  INPX       
    2803  0EEF 7E         INPOK:  MOV  A, M       ;GET NEXT CHAR
    2804  0EF0 23                 INX  H          
    2805  0EF1 22 37 00           SHLD FPPTR      
    2806  0EF4 E1         INPX:   POP  H          
    2807  0EF5 C9                 RET             
    2808                  
    2809                  
    2810                  ;**********************************************************************
    2811                  ;(HL, C) Floating absolute value, |X|
    2812                  ;HL PTS TO THE NUMBER TO BE OPERATED ON, C REG PTS TO THE LOC WHERE THE
    2813                  ; RESULT IS TO BE STORED.
    2814  0EF6 C5         LABS:   PUSH B          
    2815  0EF7 D5                 PUSH D          
    2816  0EF8 44                 MOV  B, H       
    2817  0EF9 16 04              MVI  D, 4       ;COPY 4  BYTES TO RESULT LOC
    2818  0EFB 7E         LABS1:  MOV  A, M       
    2819  0EFC 02                 STAX B          
    2820  0EFD 2C                 INR  L          
    2821  0EFE 0C                 INR  C          
    2822  0EFF 15                 DCR  D          
    2823  0F00 C2 FB 0E           JNZ  LABS1      
    2824  0F03 0D                 DCR  C          
    2825  0F04 0A                 LDAX B          
    2826  0F05 E6 7F              ANI  7FH        ;CLEAR SIGN BIT
    2827  0F07 02                 STAX B          
    2828  0F08 D1                 POP  D          
    2829  0F09 C1                 POP  B          
    2830  0F0A C9                 RET             
    2831                  
    2832                  
    2833                  ;**********************************************************************
    2834                  ;(HL, B) Float compare to floats, X - Y.  Sets the C & Z flags
    2835                  ;Original float values preserved
    2836  0F0B D5         LCMP:   PUSH D          ;SAVE REGS
    2837  0F0C E5                 PUSH H          
    2838  0F0D 11 2A 00           LXI  D, FPSCR+4 ;SAVE A COPY OF X
    2839  0F10 E5                 PUSH H          
    2840  0F11 CD 4D 0F           CALL LCMPM      
    2841  0F14 68                 MOV  L, B       ;SAVE A COPY OF Y
    2842  0F15 1C                 INR  E          
    2843  0F16 CD 4D 0F           CALL LCMPM      
    2844  0F19 E1                 POP  H          
    2845  0F1A 0E 26              MVI  C, FPSCR   
    2846  0F1C CD E5 02           CALL LSUB       ;X = X - Y
    2847  0F1F 7E                 MOV  A, M       ;RESULT ZERO? (0 0 0 100Q)
    2848  0F20 2C                 INR  L          
    2849  0F21 86                 ADD  M          
    2850  0F22 2C                 INR  L          
    2851  0F23 86                 ADD  M          
    2852  0F24 C2 33 0F           JNZ  LCMPS      
    2853  0F27 2C                 INR  L          
    2854  0F28 3E 40              MVI  A, 100Q    
    2855  0F2A BE                 CMP  M          
    2856  0F2B C2 34 0F           JNZ  LCMPS+1    
    2857  0F2E 1E 80              MVI  E, 200Q    
    2858  0F30 C3 36 0F           JMP  LCMPT      
    2859  0F33 2C         LCMPS:  INR  L          
    2860  0F34 1E 01              MVI  E, 1       
    2861                  ;E = 200Q (80H) IF RESULT IS ZERO, ELSE E = 1
    2862  0F36 7E         LCMPT:  MOV  A, M       ;RESULT NEGATIVE?
    2863  0F37 2F                 CMA             
    2864  0F38 E6 80              ANI  200Q       
    2865  0F3A 93                 SUB  E          ;SET C & Z FLAGS
    2866  0F3B D1                 POP  D          ;RESTORE X FROM COPY
    2867  0F3C 21 2A 00           LXI  H, FPSCR+4 
    2868  0F3F F5                 PUSH PSW        
    2869  0F40 CD 4D 0F           CALL LCMPM      
    2870  0F43 58                 MOV  E, B       ;RESTORE Y FROM COPY
    2871  0F44 21 2E 00           LXI  H, FPSCR+8 
    2872  0F47 CD 4D 0F           CALL LCMPM      
    2873  0F4A F1                 POP  PSW        ;FLAGS ALL SET
    2874  0F4B D1                 POP  D          
    2875  0F4C C9                 RET             ;Exit LCMP
    2876                  
    2877                  ;MOVE A COPY OF FLOAT(4 BYTES).  HL SOURCE, DE DESTINATION PTR
    2878  0F4D E5         LCMPM:  PUSH H          
    2879  0F4E 7E                 MOV  A, M       
    2880  0F4F 12                 STAX D          
    2881  0F50 23                 INX  H          
    2882  0F51 13                 INX  D          
    2883  0F52 7E                 MOV  A, M       
    2884  0F53 12                 STAX D          
    2885  0F54 23                 INX  H          
    2886  0F55 13                 INX  D          
    2887  0F56 7E                 MOV  A, M       
    2888  0F57 12                 STAX D          
    2889  0F58 23                 INX  H          
    2890  0F59 13                 INX  D          
    2891  0F5A 7E                 MOV  A, M       
    2892  0F5B 12                 STAX D          
    2893  0F5C E1                 POP  H          
    2894  0F5D C9                 RET             
    2895                  
    2896                  
    2897                  ;**********************************************************************
    2898                  ;(HL, BC) Floating convert Signed Integer to Foating Point
    2899                  ;HL contains the integer, BC points to where the result should go.
    2900  0F5E 97         LFLOAT: SUB  A          
    2901  0F5F 32 00 00           STA  DSIGN      ;Save sign
    2902  0F62 7C                 MOV  A, H       
    2903  0F63 B7                 ORA  A          
    2904  0F64 F2 6C 0F           JP   LFO1       
    2905  0F67 3E 80              MVI  A, 80H     
    2906  0F69 32 00 00           STA  DSIGN      
    2907  0F6C CD 3E 00   LFO1:   CALL IABS       ;Absolute value
    2908  0F6F EB                 XCHG            
    2909  0F70 60                 MOV  H, B       
    2910  0F71 CD 5E 09           CALL ZROIT      ;Zero result
    2911  0F74 69                 MOV  L, C       
    2912  0F75 2C                 INR  L          
    2913  0F76 72                 MOV  M, D       
    2914  0F77 2C                 INR  L          
    2915  0F78 73                 MOV  M, E       
    2916  0F79 2D                 DCR  L          
    2917  0F7A 2D                 DCR  L          
    2918  0F7B CD 5A 04           CALL FLOAT      ;Float it
    2919  0F7E 2C                 INR  L          
    2920  0F7F 2C                 INR  L          
    2921  0F80 2C                 INR  L          
    2922  0F81 4E                 MOV  C, M       
    2923  0F82 3A 00 00           LDA  DSIGN      ;Adjust sign
    2924  0F85 B1                 ORA  C          
    2925  0F86 77                 MOV  M, A       
    2926  0F87 C9                 RET             
    2927                  
    2928                  
    2929                  ;**********************************************************************
    2930                  ;(HL) Floating point conversion to signed integer.
    2931                  ;HL points to the float, on return HL contains the integer result
    2932  0F88 11 00 00   LINT:   LXI  D, 0       ;INIT RESULT = 0
    2933  0F8B 2C                 INR  L          
    2934  0F8C 2C                 INR  L          
    2935  0F8D 2C                 INR  L          
    2936  0F8E 7E                 MOV  A, M       ;A = LAST BYTE OF FLOAT
    2937  0F8F E6 40              ANI  40H        ;EXPONENT SIGN NEGATIVE? (< 1.)
    2938  0F91 C2 D7 0F           JNZ  LINTX      ;  YES, THEN DONE
    2939  0F94 7E                 MOV  A, M       
    2940  0F95 E6 3F              ANI  3FH        ;EXPONENT > 0FH? (> 32767)
    2941  0F97 FE 10              CPI  10H        
    2942  0F99 D2 00 00           JNC  ERRLN7     ;  YES, THEN OVERFLOW ERR
    2943  0F9C 7E                 MOV  A, M       ;GET SIGNS+EXPONENT
    2944  0F9D E6 80              ANI  80H        
    2945  0F9F 32 39 00           STA  FPFLG      ;SAVE MANTISSA SIGN IN FPFLG
    2946  0FA2 7E                 MOV  A, M       
    2947  0FA3 E6 0F              ANI  0FH        
    2948  0FA5 CA D7 0F           JZ   LINTX      
    2949  0FA8 4F                 MOV  C, A       ;C = EXPONENT
    2950  0FA9 06 08              MVI  B, 8       ;B = BIT COUNTER
    2951  0FAB 2D                 DCR  L          
    2952  0FAC 2D                 DCR  L          
    2953  0FAD 2D                 DCR  L          
    2954  0FAE 7E         LINT1:  MOV  A, M       ;A = FIRST BYTE OF FLOAT
    2955  0FAF 17                 RAL             ;ROTATE
    2956  0FB0 77                 MOV  M, A       
    2957  0FB1 7B                 MOV  A, E       
    2958  0FB2 17                 RAL             
    2959  0FB3 5F                 MOV  E, A       
    2960  0FB4 05                 DCR  B          
    2961  0FB5 CA BF 0F           JZ   LINT2      
    2962  0FB8 0D                 DCR  C          
    2963  0FB9 C2 AE 0F           JNZ  LINT1      
    2964  0FBC C3 D7 0F           JMP  LINTX      
    2965  0FBF 2C         LINT2:  INR  L          
    2966  0FC0 0D                 DCR  C          
    2967  0FC1 CA D7 0F           JZ   LINTX      
    2968  0FC4 06 08              MVI  B, 8       
    2969  0FC6 7E         LINT3:  MOV  A, M       ;A = SECOND BYTE OF FLOAT
    2970  0FC7 17                 RAL             
    2971  0FC8 77                 MOV  M, A       
    2972  0FC9 7B                 MOV  A, E       
    2973  0FCA 17                 RAL             
    2974  0FCB 5F                 MOV  E, A       
    2975  0FCC 7A                 MOV  A, D       
    2976  0FCD 17                 RAL             
    2977  0FCE 57                 MOV  D, A       
    2978  0FCF 05                 DCR  B          
    2979  0FD0 CA D7 0F           JZ   LINTX      
    2980  0FD3 0D                 DCR  C          
    2981  0FD4 C2 C6 0F           JNZ  LINT3      
    2982  0FD7 EB         LINTX:  XCHG            ;HL = RESULT
    2983  0FD8 3A 39 00           LDA  FPFLG      ;GET MANTISSA SIGN
    2984  0FDB B7                 ORA  A          
    2985  0FDC C8                 RZ              
    2986  0FDD CD C8 01           CALL INEG       
    2987  0FE0 C9                 RET             
    2988                  
    2989                  
    2990                  ;**********************************************************************
    2991                  ;(HL, C) Float negation, -(X)
    2992                  ;HL points to the float, C points to location of result
    2993  0FE1 C5         LNEG:   PUSH B          
    2994  0FE2 D5                 PUSH D          
    2995  0FE3 44                 MOV  B, H       
    2996  0FE4 16 04              MVI  D, 4       ;COPY 4  BYTES TO RESULT LOC
    2997  0FE6 7E         LNEG1:  MOV  A, M       
    2998  0FE7 02                 STAX B          
    2999  0FE8 2C                 INR  L          
    3000  0FE9 0C                 INR  C          
    3001  0FEA 15                 DCR  D          
    3002  0FEB C2 E6 0F           JNZ  LNEG1      
    3003  0FEE 0D                 DCR  C          
    3004  0FEF 0A                 LDAX B          
    3005  0FF0 EE 80              XRI  80H        ;COMPLEMENT SIGN BIT
    3006  0FF2 02                 STAX B          
    3007  0FF3 D1                 POP  D          
    3008  0FF4 C1                 POP  B          
    3009  0FF5 C9                 RET             
    3010                  
    3011                  
    3012                  ;**********************************************************************
    3013                  ;(A) Character output routine. Clear high bit then display it.
    3014  0FF6 E6 7F      OUTR:   ANI  7FH        ;Zero high bit
    3015  0FF8 CD 00 00           CALL DISPA      ;Display the character
    3016  0FFB C9                 RET             
    3017                  

----------------------------------------------------------------------------
Symbols:
  ABCH 03B9      ACPR 0574      ADD1 0818      ADD2 0364      ADDZ 035B    
  AGN4 064B      ALDN 0696      AORS 0566      APLS 0884      ARHL 0183    
ASCIN0 0083    ASCIN1 008F    ASCIN2 0095    ASCIN4 00C0    ASCIXT 00C1    
  BBCH 03C2      BCHK 0467      BCTL 0612      BMIN 03A7      CCHK 05C9    
  CCMP 04E0     CFCHE 04D1      COM1 039B      COM2 03AD      COPT 082D    
  COPY 083B      CRIN 02D2     CSIGN 05EE      CSTR 05F6      CTWO 081C    
  CVRT 06D3      DADD 048B      DANG 0D49     DANG1 0D9C     DANG2 0DBD    
 DANG3 0DEE     DANG4 0E3C     DANGS 0E5F      DCLR 04A2      DCMP 0579    
  DCOS 0968     DECPT 08B5      DECR 0559      DEXP 09A1     DEXPA 0A01    
DEXPA1 0A13     DEXPB 0A70    DEXPB1 0AA3    DEXPB2 0ACA    DEXPC1 098D    
DEXPC2 0991    DEXPC3 0995    DEXPC4 0999    DEXPC5 099D     DEXPP 09D5    
  DFXL 0453      DIGO 0776     DISPA 0000     DIVIT 07FF      DLOG 0B08    
 DLOGA 0B44    DLOGA1 0B73     DLOGB 0C04    DLOGB1 0C08    DLOGB2 0C42    
DLOGC0 0AF4    DLOGC2 0AF8    DLOGC3 0AFC    DLOGC4 0B00    DLOGC5 0B04    
  DLST 046E      DPOW 0C5B     DPOW2 0C7E      DRST 047D     DSIGN 0000    
  DSIN 0CC7     DSINM 0E68    DSINML 0E6C     DSINS 0D38    DSINXX 0D1E    
 DSQRT 061F      DSUB 04AB      DTAN 0E76     DTST2 0297      ENT1 0595    
  ENT2 058F       EP1 093E      EPOS 0647      EQ02 0321      EQUL 0319    
ERRLN3 0000    ERRLN7 0000      ERSQ 069E      EXPI 003B      EXPS 003C    
 FINIT 0813     FINUP 07F3     FLOAT 045A    FLTSGN 0944     FPCNT 003A    
 FPFLG 0039     FPOP1 000A     FPOP2 000E     FPOP3 0012     FPOP4 0016    
 FPOP5 001A     FPOP6 001E     FPOP7 0022     FPPTR 0037     FPRES 0006    
 FPSCR 0026      FXL1 0437      FXL2 0438     GCHAR 04C6      GCHR 07D9    
  GETA 07DA     GETEX 07FA      GETN 0958      GNUM 08FB      GOON 02C0    
  GOTV 0721      IABS 003E      IADD 0046     IADDM 0063     IADDN 0054    
 IADDU 0067      IASC 006E      ICMP 00C3      IDIV 00C9     IDIV1 00EC    
IDIV10 0118     IDIV2 0106     IDIV3 012F     IDIV4 013B     IDIVB 00D3    
 IDIVC 00DB     IDIVD 0173     IDIVE 0174     IDIVF 0176     IDIVL 0169    
 IDIVX 0181      IMUL 018B     IMUL1 0197     IMUL2 019F     IMUL3 01A6    
 IMUL4 01AF     IMUL5 01B8     IMULX 01C5      INCR 053B     INCR2 054B    
 INCR3 0548     INDF1 0509     INDFC 052D      INEG 01C8     INEXP 08CA    
   INP 0EA3      INP1 0EB5      INP2 0EC3      INP3 0ED6      INP4 0EDE    
 INPOK 0EEF     INPOP 075E     INPUT 0850      INPX 0EF4      INT1 08A6    
  INT5 088E      INTR 0404    IPRINT 01D2    IPSTR1 01DC    IPSTR2 01EC    
IPSTR3 0208      IRND 0218     IRNDL 0227     IRNDX 024B      IS09 027E    
 ISIGN 0001      ISUB 024E    ISUBNC 0264     ISUBU 026D     ISUBX 026B    
  KPGO 03FB      L000 03CB      L001 03CD      L002 03A4      L003 03D0    
  L128 03D3      L129 03D6      L131 03D9      LABS 0EF6     LABS1 0EFB    
  LADD 02E1      LADS 02E7      LASD 0387      LCMP 0F0B     LCMPM 0F4D    
 LCMPS 0F33     LCMPT 0F36      LDCP 05BE      LDIV 0285    LFLOAT 0F5E    
  LFO1 0F6C      LINT 0F88     LINT1 0FAE     LINT2 0FBF     LINT3 0FC6    
 LINTX 0FD7      LLTB 0304      LMCM 03DC      LMCP 05C5      LMUL 03E4    
  LNEG 0FE1     LNEG1 0FE6      LOOP 081E      LSFT 07B2     LSIGN 003D    
  LSUB 02E5     LXCHG 06A5    LXCHG1 06A9      LXFR 05A9      MADD 0429    
  MANT 0374     MAXCH 003F    MAXINT 06CF      MDGN 073C     MDSKP 074A    
 MINCH 00C0      MORD 07DF      MSFH 05FE       MSG 0000     MULTT 078A    
  NCHK 0309     NNZRO 06EB      NORM 0432     NORM1 0433     NOSPC 0276    
  NOT0 032F      NZRO 0708     OFLW1 04FB     OFLWC 05E0       OK1 0745    
   ONE 06C7      OUTR 0FF6      OVER 059C      PLSV 07D5      POPD 075B    
RANDOM 0002      REP3 02AC      REP5 05AB      REP6 043E     SAVEN 0948    
 SCALE 0872     SCCFG 0557     SCHAR 0450      SH10 0311      SIGN 07CC    
 SINC1 0CA7     SINC2 0CAB     SINC3 0CAF     SINC4 0CB3     SINC5 0CB7    
 SINC6 0CBB     SINC7 0CBF     SINC8 0CC3     STORC 05D8      STR1 1F40    
  SUBZ 033E       TEN 06C3      TEN2 06BF      TEN3 06BB      TEN4 06B7    
  TEN5 06B3     TLOOP 07B5      TLP2 07B6      TRY1 072F      TRYP 0911    
 TRYTN 089E      TST1 0734      TST8 0714     TSTEX 0865      TSTN 0916    
  TSTR 056C      TWOD 0805     UFLW1 04ED     UFLWC 05E7     USEIT 08EC    
 WCHAR 0524      WIND 0504     WMANT 051D      WOVR 04F6      WUND 04E8    
  WZER 0512     WZERC 0534      ZCHK 045F      ZERO 06CB     ZMCHK 045F    
 ZROIT 095E    
----------------------------------------------------------------------------
Error codes: *O*=undefined opcode, *V*=illegal value, *R*=illegal register,
             *U*=undefined symbol, *D*=duplicate symbol
Total Errors = 0
